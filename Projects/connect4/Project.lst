Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/17/19 00:43:53
CONNECT FOUR     (connect4.asm				     Page 1 - 1


				TITLE CONNECT FOUR     (connect4.asm)

				; Author: Lyell Read
				; Course / Project ID: CS271/connect4           Start_Date:1/22/2019
				; Description: Play the game connect 4 with a 7*7 grid. Either 2p or p vs cpu. Text based. Yeah. 

				;OOB's : check if superfluous store to var when call to procs for check. Text color for play again. Range checking for cpu play (no max) and for player input

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				.stack 4096


					;===============================
					;SET UP MACROS USED THROUGHOUT
					;===============================

				mwritestring MACRO string
					push 	edx
					mov		edx, OFFSET string
					call	WriteString
					pop		edx
				ENDM

				mwritestringnewline MACRO string
					push 	edx
					mov		edx, OFFSET string
					call	WriteString
					call	CrLF
					pop		edx
				ENDM

				mwritecharpipe MACRO string
					push 	eax
					mov		al, '|'
					call	WriteChar
					pop		eax
				ENDM

				mwritecharspace MACRO string
					push 	eax
					mov		al, ' '
					call	WriteChar
					pop		eax
				ENDM

				mwincheck MACRO
					call	check_horizontal
					add		eax, edx
					call	check_vertical
					add		eax, edx
					call	check_diagonal_down
					add		eax, edx
					call	check_diagonal_up
					add		eax, edx
				ENDM
					
					
				msetval MACRO value, element, array_name
					push	esi
					push	eax
					mov		eax, value
					mov		esi, OFFSET array_name
					mov		[esi + (element * 2)], ax
					pop		eax
					pop		esi
				ENDM

				mwritedecfrom MACRO reg
					push 	eax
					mov		eax, reg
					call	WriteDec
					pop		eax
				ENDM
					
					
					;===============================
					;          CONSTANTS
					;===============================
					
 = 00000007			rows				EQU		7
 = 00000007			cols				EQU		7
 = 00000031			turns_to_cat		EQU		49 ;rows * cols; maybe there's a neater way?
 = 00000010			grid_offset_side	EQU		16 ;the space in characters between the terminal left edge and the printout of the grid.
 = 00000003			grid_offset_top		EQU		3 ;the space in characters between the top of the terminal and the top edge of the grid


					;===============================
					;         DATA SEGMENT
					;===============================

 00000000			.data
					
				;Text Segments
 00000000 57 65 6C 63 6F	welcome_message				BYTE	"Welcome. ",0
	   6D 65 2E 20 00
 0000000A 50 6C 61 79 65	player_count_prompt			BYTE	"Players (1 or 2):",0
	   72 73 20 28 31
	   20 6F 72 20 32
	   29 3A 00
 0000001C 59 6F 75 20 64	cat_game_printout			BYTE	"You done did a cat game boi.",0
	   6F 6E 65 20 64
	   69 64 20 61 20
	   63 61 74 20 67
	   61 6D 65 20 62
	   6F 69 2E 00
 00000039 50 6C 61 79 20	play_again_prompt			BYTE	"Play Again (1 or 0):",0
	   41 67 61 69 6E
	   20 28 31 20 6F
	   72 20 30 29 3A
	   00
 0000004E 50 6C 61 79 65	player_1					BYTE	"Player ",0
	   72 20 00
 00000056 2C 20 70 6C 65	player_col_entry_2			BYTE	", please enter the col to play in:",0	
	   61 73 65 20 65
	   6E 74 65 72 20
	   74 68 65 20 63
	   6F 6C 20 74 6F
	   20 70 6C 61 79
	   20 69 6E 3A 00
 00000079 20 57 4F 4E 2E	player_win_2				BYTE	" WON.",0
	   00

 0000007F 20 2B 2D 2D 2D	g_bar						BYTE	" +---+---+---+---+---+---+---+ ",0
	   2B 2D 2D 2D 2B
	   2D 2D 2D 2B 2D
	   2D 2D 2B 2D 2D
	   2D 2B 2D 2D 2D
	   2B 2D 2D 2D 2B
	   20 00
 0000009F 20 20 20 30 20	g_numbers					BYTE	"   0   1   2   3   4   5   6",0
	   20 20 31 20 20
	   20 32 20 20 20
	   33 20 20 20 34
	   20 20 20 35 20
	   20 20 36 00

 000000BC 48 4F 52 49 5A	DBG_1						BYTE	"HORIZONTAL:",0
	   4F 4E 54 41 4C
	   3A 00
 000000C8 56 45 52 54 49	DBG_2						BYTE	"VERTICAL:",0
	   43 41 4C 3A 00
 000000D2 44 49 41 47 4F	DBG_3						BYTE	"DIAGONAL-UP:",0
	   4E 41 4C 2D 55
	   50 3A 00
 000000DF 44 49 41 47 4F	DBG_4						BYTE	"DIAGONAL-DOWN:",0
	   4E 41 4C 2D 44
	   4F 57 4E 3A 00
 000000EE 56 61 6C 75 65	DBG_5						BYTE	"Value:",0
	   3A 00
				;Array Defenition
 000000F5  00000031 [		connect4_grid				WORD	49 DUP (0)
	    0000
	   ]
													
													
 00000157  00000004 [		check_array					WORD	4 DUP(0)
	    0000
	   ]

 00000000			.data?
				;Variable Defenitions
 00000000 0000			get_row						WORD	?	;(0..6) will be used to store the row of a get call	
 00000002 0000			get_col						WORD	?	;(0..6) will be used to store the col of a get call
 00000004 0000			player_number				WORD	?	;(1|2) Measures who has just played
 00000006 0000			turns_played_total			WORD	?	;will increment with each turn, checking against turns_to_cat
 00000008 0000			computer_switch				WORD	?	;(0|1) Measures weather the player wants 2p or 1p respectively
 0000000A 0000			winning_player				WORD	?	;(1|2) set by win_check alg.
 0000000C 0000			player_col					WORD	?	;(0..6) Choice of where to play.


 00000000			.code
 00000000			main PROC
					
 00000000				top_main:

					;===============================================================
					;SET UP ALL VALUES TO ESSENTIALLY "RESET" THE GAME
					;=============================================================== note: add array blanking! 

					mwritestringnewline welcome_message ; welcome message
 00000000  52		     1		push 	edx
 00000001  BA 00000000 R     1		mov		edx, OFFSET welcome_message
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  E8 00000000 E     1		call	CrLF
 00000010  5A		     1		pop		edx
					mwritestring player_count_prompt ; Ask the user how many players they want (SET COMPUTER SWITCH)
 00000011  52		     1		push 	edx
 00000012  BA 0000000A R     1		mov		edx, OFFSET player_count_prompt
 00000017  E8 00000000 E     1		call	WriteString
 0000001C  5A		     1		pop		edx
					
 0000001D  E8 00000000 E		call	ReadInt ;User is expected to input 1 or 2. If 1 we want to set the computer switch, otherwise not.
 00000022  E8 00000000 E		call	CrLF
 00000027  66| C7 05			mov		computer_switch, 0
	   00000008 R
	   0000
 00000030  83 F8 02			cmp		eax, 2 ;if the user has chosen two player, jump to bottom
 00000033  74 09			je		computer_switch_no_change

 00000035  66| C7 05			mov		computer_switch, 1
	   00000008 R
	   0001
 0000003E			computer_switch_no_change:
 0000003E  66| C7 05			mov		player_number, 1;set the current player to 1 as p1 will start regardless of player mode...
	   00000004 R
	   0001
 00000047  66| C7 05			mov		turns_played_total, 1;set the total turns played to 1 as we are resetting the game
	   00000006 R
	   0001
 00000050  66| C7 05			mov		winning_player, 0;set the winner to 0
	   0000000A R
	   0000
					
					;Zero the grid out (in case of play again)
 00000059  B9 00000031			mov		ecx, 49
 0000005E  B8 00000000			mov		eax, 0
 00000063  BE 000000F5 R		mov		esi, OFFSET connect4_grid
 00000068				loop_main_top:
 00000068  66| 89 06				mov		[esi],ax 
 0000006B  83 C6 02				add		esi, 2
 0000006E  E2 F8				loop	loop_main_top	
					
					;===============================================================
					;LET THE GAME BEGIN! < < < < < < < < < < < < < < < < < < < < < < 
					;===============================================================	
					
 00000070  E8 00000000 E		call	CrLF
 00000075  E8 00000000 E		call	Waitmsg
 0000007A  E8 00000000 E		call	clrscr
					
 0000007F			top_turn:

					;print that griddy boi
 0000007F  E8 000003BA			call	print_grid
					
					;if turns compeleted is the same as turns possible, call it a CAT GAME!
 00000084  66| 83 3D			cmp		turns_played_total, turns_to_cat
	   00000006 R 31
 0000008C  0F 84 000000F1		je		cat_game
					
					;check if the player number is 1, and if so, send to play a player turn
 00000092  66| 83 3D			cmp		player_number, 1
	   00000004 R 01
 0000009A  74 1E			je		player_turn
					
					;we are either player 2 or CPU now, so check CPU flag

 0000009C  66| 83 3D			cmp		computer_switch, 1
	   00000008 R 01
 000000A4  74 02			je		computer_turn
 000000A6  EB 12			jmp		player_turn ;we are player 2.
					
						
 000000A8			computer_turn: ;NOTE: if CPU is playing, then player_num =2

					;===============================
					;        Computer Turn
					;===============================
					
					;play CPU turn lol
 000000A8  B8 00000007			mov		eax, 7; set rand high range
 000000AD  E8 00000000 E		call	RandomRange ; rand on 0..6
 000000B2  66| A3			mov		player_col, ax
	   0000000C R
					
 000000B8  EB 3E			jmp		win_check_label
					
 000000BA			player_turn:

					;===============================
					;         Player Turn
					;===============================

 000000BA  B6 14			mov		dh, grid_offset_top + 17;total offset from top where this line is.
 000000BC  B2 10			mov		dl, grid_offset_side 
					
 000000BE  E8 00000000 E		call 	gotoXY
 000000C3  E8 00000449			call	clear_line; gotoxy has set the cursor to the line where this should print. Clear that line.
					
					mwritestring player_1
 000000C8  52		     1		push 	edx
 000000C9  BA 0000004E R     1		mov		edx, OFFSET player_1
 000000CE  E8 00000000 E     1		call	WriteString
 000000D3  5A		     1		pop		edx
 000000D4  66| A1			mov		ax, player_number
	   00000004 R
 000000DA  E8 00000000 E		call	WriteDec
					mwritestring player_col_entry_2
 000000DF  52		     1		push 	edx
 000000E0  BA 00000056 R     1		mov		edx, OFFSET player_col_entry_2
 000000E5  E8 00000000 E     1		call	WriteString
 000000EA  5A		     1		pop		edx
 000000EB  E8 00000000 E		call	ReadDec
 000000F0  66| A3			mov		player_col, ax
	   0000000C R
					
 000000F6  EB 00			jmp		win_check_label
					
 000000F8			win_check_label:

 000000F8  E8 0000042E			call	drop_to_bottom

 000000FD  B8 00000000			mov		eax, 0 ;eax is used by macro to keep track of wins
					mwincheck
 00000102  E8 000000B7	     1		call	check_horizontal
 00000107  03 C2	     1		add		eax, edx
 00000109  E8 00000135	     1		call	check_vertical
 0000010E  03 C2	     1		add		eax, edx
 00000110  E8 00000240	     1		call	check_diagonal_down
 00000115  03 C2	     1		add		eax, edx
 00000117  E8 000001AC	     1		call	check_diagonal_up
 0000011C  03 C2	     1		add		eax, edx
					
 0000011E  83 F8 00			cmp		eax, 0
 00000121  75 21			jne		win_for_current_player
					
					;swap player_number to initiate the next turn..
 00000123  66| A1			mov		ax, player_number
	   00000004 R
 00000129  83 F8 01			cmp		eax, 1
 0000012C  74 03			je		add_one
 0000012E  48				dec		eax
 0000012F  EB 01			jmp		swap_done
 00000131				add_one:
 00000131  40				inc		eax
 00000132				swap_done:
 00000132  66| A3			mov		player_number, ax
	   00000004 R
					
 00000138  66| FF 05			inc		turns_played_total
	   00000006 R
					
					;jump back to top of turn "loop".
 0000013F  E9 FFFFFF3B			jmp		top_turn
					
 00000144			win_for_current_player:

 00000144  BA 00000000			mov		edx, 0
 00000149  E8 00000000 E		call	GotoXY
					
 0000014E  BA 0000000F			mov		edx, white + (16* black)
 00000153  E8 00000000 E		call	SetTextColor

					mwritestring player_1
 00000158  52		     1		push 	edx
 00000159  BA 0000004E R     1		mov		edx, OFFSET player_1
 0000015E  E8 00000000 E     1		call	WriteString
 00000163  5A		     1		pop		edx
 00000164  0F B7 05			movzx	eax, player_number
	   00000004 R
 0000016B  E8 00000000 E		call	WriteDec
					mwritestringnewline player_win_2
 00000170  52		     1		push 	edx
 00000171  BA 00000079 R     1		mov		edx, OFFSET player_win_2
 00000176  E8 00000000 E     1		call	WriteString
 0000017B  E8 00000000 E     1		call	CrLF
 00000180  5A		     1		pop		edx
					
 00000181  EB 13			jmp play_again

 00000183			cat_game:
					
					;print that a cat game is reached
					mwritestringnewline cat_game_printout
 00000183  52		     1		push 	edx
 00000184  BA 0000001C R     1		mov		edx, OFFSET cat_game_printout
 00000189  E8 00000000 E     1		call	WriteString
 0000018E  E8 00000000 E     1		call	CrLF
 00000193  5A		     1		pop		edx

 00000194  EB 00			jmp		play_again
					
					
 00000196			play_again:

					;print play again message
					mwritestring play_again_prompt
 00000196  52		     1		push 	edx
 00000197  BA 00000039 R     1		mov		edx, OFFSET play_again_prompt
 0000019C  E8 00000000 E     1		call	WriteString
 000001A1  5A		     1		pop		edx

 000001A2  E8 00000000 E		call	ReadInt
 000001A7  E8 00000000 E		call	CrLF
 000001AC  83 F8 01			cmp		eax, 1
 000001AF  0F 84 FFFFFE4B		je		top_main
 000001B5  EB 00			jmp		hard_stop
					
					
					
 000001B7			hard_stop:
					
					exit	; exit to operating system
 000001B7  6A 00	   *	    push   +000000000h
 000001B9  E8 00000000 E   *	    call   ExitProcess
 000001BE			main ENDP

					;===============================
					;      H O R I Z O N T A L
					;===============================

				;===============================================
 000001BE			check_horizontal PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================
					

 000001BE  56		   *	    push   esi
 000001BF  51		   *	    push   ecx
 000001C0  53		   *	    push   ebx
 000001C1  50		   *	    push   eax
 000001C2  55				push	ebp
 000001C3  8B EC			mov		ebp, esp
 000001C5  0F B7 05			movzx	eax, player_number
	   00000004 R
					
 000001CC  B9 00000007			mov		ecx, 7 ;rows to visit
 000001D1				row_loop_top:
					
 000001D1  51					push	ecx
 000001D2  8B D9				mov		ebx, ecx
 000001D4  B9 00000004				mov		ecx, 4
						
 000001D9					col_loop_top:
						
 000001D9  4B						dec		ebx ; row
 000001DA  49						dec		ecx ; col

							;======================
							;mwritecharpipe
							;mwritedecfrom ebx
							;mwritedecfrom ecx
							
 000001DB  E8 00000023					call	load_horizontal
 000001E0  E8 00000229					call	check_for_win ;player in eax, results in edx
 000001E5  83 FA 00					cmp		edx, 0
 000001E8  75 0E					jne		return_horizontal_success ; assume the winner is the current player, as wincheck would have caught the other case
							
							;======================

 000001EA  43						inc		ebx
 000001EB  41						inc		ecx
							
 000001EC  E2 EB					loop col_loop_top
							
 000001EE  59					pop 	ecx
 000001EF  E2 E0				loop	row_loop_top
					
					;no win case
 000001F1  BB 00000000			mov		ebx, 0
 000001F6  EB 05			jmp		return_horizontal
						
 000001F8				return_horizontal_success:
 000001F8  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 000001FB  EB 00				jmp		return_horizontal
						
 000001FD				return_horizontal:
 000001FD  5D				pop		ebp
					ret
 000001FE  58		   *	    pop    eax
 000001FF  5B		   *	    pop    ebx
 00000200  59		   *	    pop    ecx
 00000201  5E		   *	    pop    esi
 00000202  C3		   *	    ret    00000h

 00000203			check_horizontal ENDP

				;===============================================
 00000203			load_horizontal PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the horizontal segment starting at ebx, edx into check_array.
				;===============================================

 00000203  53		   *	    push   ebx
 00000204  51		   *	    push   ecx
 00000205  52		   *	    push   edx
 00000206  56		   *	    push   esi
 00000207  50		   *	    push   eax
 00000208  55				push	ebp
 00000209  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 0000020B  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 0000020D  B9 00000004			mov		ecx, 4
					
 00000212				horizontal_load_loop_top:
						
 00000212  49					dec		ecx
 00000213  52					push	edx
						;3,2,1,0
						
 00000214  03 D1				add		edx, ecx ; add 0,1,2,3 to column number
						
 00000216  66| 89 1D				mov		get_row, bx
	   00000000 R
 0000021D  66| 89 15				mov		get_col, dx
	   00000002 R
						
 00000224  E8 000001B5				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 00000229  56		     1		push	esi
 0000022A  50		     1		push	eax
 0000022B  8B C0	     1		mov		eax, eax
 0000022D  BE 00000157 R     1		mov		esi, OFFSET check_array
 00000232  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 00000236  58		     1		pop		eax
 00000237  5E		     1		pop		esi
						
						
 00000238  5A					pop		edx
 00000239  41					inc		ecx
 0000023A  E2 D6				loop horizontal_load_loop_top
						

 0000023C  5D				pop		ebp
					ret
 0000023D  58		   *	    pop    eax
 0000023E  5E		   *	    pop    esi
 0000023F  5A		   *	    pop    edx
 00000240  59		   *	    pop    ecx
 00000241  5B		   *	    pop    ebx
 00000242  C3		   *	    ret    00000h

 00000243			load_horizontal ENDP

					;===============================
					;        V E R T I C A L
					;===============================

				;===============================================
 00000243			check_vertical PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================
					
 00000243  56		   *	    push   esi
 00000244  51		   *	    push   ecx
 00000245  53		   *	    push   ebx
 00000246  50		   *	    push   eax
 00000247  55				push	ebp
 00000248  8B EC			mov		ebp, esp
 0000024A  0F B7 05			movzx	eax, player_number
	   00000004 R

 00000251  B9 00000004			mov		ecx, 4 ;rows to visit
 00000256				row_loop_top:
					
 00000256  51					push	ecx
 00000257  8B D9				mov		ebx, ecx
 00000259  B9 00000007				mov		ecx, 7
						
 0000025E					col_loop_top:
						
 0000025E  4B						dec		ebx
 0000025F  49						dec		ecx

							;======================
							; mwritecharpipe
							; mwritedecfrom ebx
							; mwritedecfrom ecx
							
 00000260  E8 00000023					call	load_vertical
 00000265  E8 000001A4					call	check_for_win ;player in eax, results in edx
 0000026A  83 FA 00					cmp		edx, 0
 0000026D  75 0E					jne		return_vertical_success ; assume the winner is the current player, as wincheck would have caught the other case
							;======================

 0000026F  43						inc		ebx
 00000270  41						inc		ecx
							
 00000271  E2 EB					loop col_loop_top
							
 00000273  59					pop 	ecx
 00000274  E2 E0				loop	row_loop_top
					
					;no win case found. 
 00000276  BB 00000000			mov		ebx, 0
 0000027B  EB 05			jmp		return_vertical
						
 0000027D				return_vertical_success:
 0000027D  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 00000280  EB 00				jmp		return_vertical
						
 00000282				return_vertical:

 00000282  5D				pop		ebp
					ret
 00000283  58		   *	    pop    eax
 00000284  5B		   *	    pop    ebx
 00000285  59		   *	    pop    ecx
 00000286  5E		   *	    pop    esi
 00000287  C3		   *	    ret    00000h

 00000288			check_vertical ENDP

				;===============================================
 00000288			load_vertical PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the horizontal segment starting at ebx, edx into check_array.
				;===============================================

 00000288  53		   *	    push   ebx
 00000289  51		   *	    push   ecx
 0000028A  52		   *	    push   edx
 0000028B  56		   *	    push   esi
 0000028C  50		   *	    push   eax
 0000028D  55				push	ebp
 0000028E  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 00000290  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 00000292  B9 00000004			mov		ecx, 4
					
 00000297				vertical_load_loop_top:
						
 00000297  49					dec		ecx
 00000298  53					push	ebx ; store the row number to mem
						;3,2,1,0
						
 00000299  03 D9				add		ebx, ecx ; add 0,1,2,3 to row number
						
 0000029B  66| 89 1D				mov		get_row, bx
	   00000000 R
 000002A2  66| 89 15				mov		get_col, dx
	   00000002 R
						
 000002A9  E8 00000130				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 000002AE  56		     1		push	esi
 000002AF  50		     1		push	eax
 000002B0  8B C0	     1		mov		eax, eax
 000002B2  BE 00000157 R     1		mov		esi, OFFSET check_array
 000002B7  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 000002BB  58		     1		pop		eax
 000002BC  5E		     1		pop		esi
						
						
 000002BD  5B					pop		ebx
 000002BE  41					inc		ecx
 000002BF  E2 D6				loop vertical_load_loop_top
						

 000002C1  5D				pop		ebp
					ret
 000002C2  58		   *	    pop    eax
 000002C3  5E		   *	    pop    esi
 000002C4  5A		   *	    pop    edx
 000002C5  59		   *	    pop    ecx
 000002C6  5B		   *	    pop    ebx
 000002C7  C3		   *	    ret    00000h

 000002C8			load_vertical ENDP

					;===============================
					;         D I A G - U P
					;===============================
					
				;===============================================
 000002C8			check_diagonal_up PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================
					
					;needs to generate (3,0) -> (6,3) = (0+3, 0) -> (3+3, 3)

 000002C8  56		   *	    push   esi
 000002C9  51		   *	    push   ecx
 000002CA  53		   *	    push   ebx
 000002CB  50		   *	    push   eax
 000002CC  55				push	ebp
 000002CD  8B EC			mov		ebp, esp
 000002CF  0F B7 05			movzx	eax, player_number
	   00000004 R
					
 000002D6  B9 00000004			mov		ecx, 4 ;rows to visit
 000002DB				row_loop_top:
					
 000002DB  51					push	ecx
 000002DC  8B D9				mov		ebx, ecx
 000002DE  B9 00000004				mov		ecx, 4
						
 000002E3					col_loop_top:
					
 000002E3  83 C3 02					add		ebx, 2 ;row -1 +3 = +2
 000002E6  49						dec		ecx ;col

							;======================
							; mwritecharpipe
							; mwritedecfrom ebx
							; mwritedecfrom ecx
							
 000002E7  E8 00000025					call	load_diagonal_up
 000002EC  E8 0000011D					call	check_for_win ;player in eax, results in edx
 000002F1  83 FA 00					cmp		edx, 0
 000002F4  75 10					jne		return_diagonal_up_success ; assume the winner is the current player, as wincheck would have caught the other case
										
							;======================

 000002F6  83 EB 02					sub		ebx, 2
 000002F9  41						inc		ecx
							
 000002FA  E2 E7					loop col_loop_top
							
 000002FC  59					pop 	ecx
 000002FD  E2 DC				loop	row_loop_top
					
					;no win case found. 
 000002FF  BA 00000000			mov		edx, 0
 00000304  EB 05			jmp		return_diagonal_up
						
 00000306				return_diagonal_up_success:
 00000306  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 00000309  EB 00				jmp		return_diagonal_up
						
 0000030B				return_diagonal_up:

 0000030B  5D				pop		ebp
					ret
 0000030C  58		   *	    pop    eax
 0000030D  5B		   *	    pop    ebx
 0000030E  59		   *	    pop    ecx
 0000030F  5E		   *	    pop    esi
 00000310  C3		   *	    ret    00000h

 00000311			check_diagonal_up ENDP

				;===============================================
 00000311			load_diagonal_up PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the horizontal segment starting at ebx, edx into check_array.
				;===============================================

 00000311  53		   *	    push   ebx
 00000312  51		   *	    push   ecx
 00000313  52		   *	    push   edx
 00000314  56		   *	    push   esi
 00000315  50		   *	    push   eax
 00000316  55				push	ebp
 00000317  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 00000319  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 0000031B  B9 00000004			mov		ecx, 4
					
 00000320				diagonal_up_load_loop_top:
						
 00000320  49					dec		ecx
 00000321  53					push	ebx ; store the row number to mem
 00000322  52					push	edx
						;ECX == 3,2,1,0
						
 00000323  2B D9				sub		ebx, ecx ; add 0,1,2,3 to row number (3,0) -> (0,0)
 00000325  03 D1				add		edx, ecx ; add 0,1,2,3 to col number (0,0) -> (0,3)
						
 00000327  66| 89 1D				mov		get_row, bx
	   00000000 R
 0000032E  66| 89 15				mov		get_col, dx
	   00000002 R
						
 00000335  E8 000000A4				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 0000033A  56		     1		push	esi
 0000033B  50		     1		push	eax
 0000033C  8B C0	     1		mov		eax, eax
 0000033E  BE 00000157 R     1		mov		esi, OFFSET check_array
 00000343  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 00000347  58		     1		pop		eax
 00000348  5E		     1		pop		esi
						
 00000349  5A					pop		edx
 0000034A  5B					pop		ebx
 0000034B  41					inc		ecx
 0000034C  E2 D2				loop diagonal_up_load_loop_top
						

 0000034E  5D				pop		ebp
					ret
 0000034F  58		   *	    pop    eax
 00000350  5E		   *	    pop    esi
 00000351  5A		   *	    pop    edx
 00000352  59		   *	    pop    ecx
 00000353  5B		   *	    pop    ebx
 00000354  C3		   *	    ret    00000h

 00000355			load_diagonal_up ENDP

					;===============================
					;      D I A G - D O W N
					;===============================

				;===============================================
 00000355			check_diagonal_down PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================
					
					;(0,0) -> (3,3)

 00000355  56		   *	    push   esi
 00000356  51		   *	    push   ecx
 00000357  53		   *	    push   ebx
 00000358  50		   *	    push   eax
 00000359  55				push	ebp
 0000035A  8B EC			mov		ebp, esp
 0000035C  0F B7 05			movzx	eax, player_number
	   00000004 R
					
 00000363  B9 00000004			mov		ecx, 4 ;rows to visit
 00000368				row_loop_top:
					
 00000368  51					push	ecx
 00000369  8B D9				mov		ebx, ecx
 0000036B  B9 00000004				mov		ecx, 4
						
 00000370					col_loop_top:
						
 00000370  4B						dec		ebx
 00000371  49						dec		ecx

							;======================

							; mwritecharpipe
							; mwritedecfrom ebx
							; mwritedecfrom ecx
							
 00000372  E8 00000023					call	load_diagonal_down
 00000377  E8 00000092					call	check_for_win ;player in eax, results in edx
 0000037C  83 FA 00					cmp		edx, 0
 0000037F  75 0E					jne		return_diagonal_down_success ; assume the winner is the current player, as wincheck would have caught the other case
							
							;======================

 00000381  43						inc		ebx
 00000382  41						inc		ecx
							
 00000383  E2 EB					loop col_loop_top
							
 00000385  59					pop 	ecx
 00000386  E2 E0				loop	row_loop_top
					
					;no win case found. 
 00000388  BA 00000000			mov		edx, 0
 0000038D  EB 05			jmp		return_diagonal_down
						
 0000038F				return_diagonal_down_success:
 0000038F  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 00000392  EB 00				jmp		return_diagonal_down
						
 00000394				return_diagonal_down:
					
 00000394  5D				pop		ebp
					ret
 00000395  58		   *	    pop    eax
 00000396  5B		   *	    pop    ebx
 00000397  59		   *	    pop    ecx
 00000398  5E		   *	    pop    esi
 00000399  C3		   *	    ret    00000h

 0000039A			check_diagonal_down ENDP

				;===============================================
 0000039A			load_diagonal_down PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the horizontal segment starting at ebx, edx into check_array.
				;===============================================

 0000039A  53		   *	    push   ebx
 0000039B  51		   *	    push   ecx
 0000039C  52		   *	    push   edx
 0000039D  56		   *	    push   esi
 0000039E  50		   *	    push   eax
 0000039F  55				push	ebp
 000003A0  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 000003A2  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 000003A4  B9 00000004			mov		ecx, 4
					
 000003A9				diagonal_down_load_loop_top:
						
 000003A9  49					dec		ecx
 000003AA  53					push	ebx ; store the row number to mem
 000003AB  52					push	edx
						;ECX == 3,2,1,0
						
 000003AC  03 D9				add		ebx, ecx ; add 0,1,2,3 to row number (0,0) -> (3,0)
 000003AE  03 D1				add		edx, ecx ; add 0,1,2,3 to col number (6,0) -> (6,3)
						
 000003B0  66| 89 1D				mov		get_row, bx
	   00000000 R
 000003B7  66| 89 15				mov		get_col, dx
	   00000002 R
						
 000003BE  E8 0000001B				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 000003C3  56		     1		push	esi
 000003C4  50		     1		push	eax
 000003C5  8B C0	     1		mov		eax, eax
 000003C7  BE 00000157 R     1		mov		esi, OFFSET check_array
 000003CC  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 000003D0  58		     1		pop		eax
 000003D1  5E		     1		pop		esi
						
 000003D2  5A					pop		edx
 000003D3  5B					pop		ebx
 000003D4  41					inc		ecx
 000003D5  E2 D2				loop diagonal_down_load_loop_top
						

 000003D7  5D				pop		ebp
					ret
 000003D8  58		   *	    pop    eax
 000003D9  5E		   *	    pop    esi
 000003DA  5A		   *	    pop    edx
 000003DB  59		   *	    pop    ecx
 000003DC  5B		   *	    pop    ebx
 000003DD  C3		   *	    ret    00000h

 000003DE			load_diagonal_down ENDP

				;===============================================
 000003DE			get_value_at PROC uses esi ebx ecx
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:returns value in eax. Use variables to access
				;===============================================

 000003DE  56		   *	    push   esi
 000003DF  53		   *	    push   ebx
 000003E0  51		   *	    push   ecx
 000003E1  55				push	ebp
 000003E2  8B EC			mov		ebp, esp

 000003E4  BE 000000F5 R		mov		esi, OFFSET connect4_grid
 000003E9  0F B7 1D			movzx	ebx, get_row ; ROW
	   00000000 R
 000003F0  0F B7 0D			movzx	ecx, get_col ; COL
	   00000002 R
					
					;[esi + ((get_row * 7) + get_col)*2
					
 000003F7  6B DB 0E			imul	ebx, 14
 000003FA  6B C9 02			imul 	ecx, 2
					
 000003FD  03 D9			add		ebx, ecx ; STO in ebx
 000003FF  03 F3			add		esi, ebx
					
 00000401  B8 00000000			mov		eax, 0
 00000406  66| 8B 06			mov		ax, [esi]

 00000409  5D				pop		ebp
					ret
 0000040A  59		   *	    pop    ecx
 0000040B  5B		   *	    pop    ebx
 0000040C  5E		   *	    pop    esi
 0000040D  C3		   *	    ret    00000h

 0000040E			get_value_at ENDP

				;===============================================
 0000040E			check_for_win PROC USES esi ecx ebx
				;
				;Pre-Conditions:player in eax, result in edx
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 0000040E  56		   *	    push   esi
 0000040F  51		   *	    push   ecx
 00000410  53		   *	    push   ebx
 00000411  55				push	ebp
 00000412  8B EC			mov		ebp, esp

 00000414  B9 00000004			mov		ecx, 4
					
 00000419				check_loop_top:
						
 00000419  BE 00000157 R			mov		esi, OFFSET check_array
 0000041E  49					dec		ecx
 0000041F  8B D9				mov		ebx, ecx
 00000421  6B DB 02				imul	ebx, 2
 00000424  03 F3				add		esi, ebx

 00000426  66| 39 06				cmp		[esi],ax ; check against the player number
 00000429  75 07				jne		failed
						
 0000042B  41					inc		ecx
 0000042C  E2 EB				loop check_loop_top
						
 0000042E  8B D0			mov		edx, eax ;set return value to be the player number
 00000430  EB 07			jmp		check_proc_end
					
 00000432				failed:
					
 00000432  BA 00000000				mov		edx, 0
 00000437  EB 00				jmp		check_proc_end
					
 00000439				check_proc_end:
 00000439  5D				pop		ebp
					ret
 0000043A  5B		   *	    pop    ebx
 0000043B  59		   *	    pop    ecx
 0000043C  5E		   *	    pop    esi
 0000043D  C3		   *	    ret    00000h

 0000043E			check_for_win ENDP

				;===============================================
 0000043E			print_grid PROC USES eax ecx edx
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 0000043E  50		   *	    push   eax
 0000043F  51		   *	    push   ecx
 00000440  52		   *	    push   edx
 00000441  55				push	ebp
 00000442  8B EC			mov		ebp, esp

					;call	Clrscr
					
 00000444  B6 03			mov		dh, grid_offset_top
 00000446  B2 10			mov		dl, grid_offset_side
					
 00000448  BE 000000F5 R		mov		esi, OFFSET connect4_grid
 0000044D  B9 00000007			mov		ecx, 7
					
 00000452  E8 00000000 E		call	gotoXY
					
 00000457  B8 00000011			mov		eax, blue + (16 * blue)
 0000045C  E8 00000000 E		call	SetTextColor
					
					mwritestring g_bar
 00000461  52		     1		push 	edx
 00000462  BA 0000007F R     1		mov		edx, OFFSET g_bar
 00000467  E8 00000000 E     1		call	WriteString
 0000046C  5A		     1		pop		edx
					
 0000046D				top_row:
						
 0000046D  51					push	ecx
 0000046E  B9 00000007				mov		ecx, 7

 00000473  FE C6				inc		dh ;move down one layer
 00000475  E8 00000000 E			call	gotoXY
						
						mwritecharspace
 0000047A  50		     1		push 	eax
 0000047B  B0 20	     1		mov		al, ' '
 0000047D  E8 00000000 E     1		call	WriteChar
 00000482  58		     1		pop		eax
						mwritecharpipe ; print pipe
 00000483  50		     1		push 	eax
 00000484  B0 7C	     1		mov		al, '|'
 00000486  E8 00000000 E     1		call	WriteChar
 0000048B  58		     1		pop		eax
						mwritecharspace ; print space
 0000048C  50		     1		push 	eax
 0000048D  B0 20	     1		mov		al, ' '
 0000048F  E8 00000000 E     1		call	WriteChar
 00000494  58		     1		pop		eax
					
 00000495					top_col:
							
 00000495  B8 00000000					mov		eax, 0
 0000049A  66| 8B 06					mov		ax, [esi]
							
							;call	WriteDec ; for no colors :(
 0000049D  E8 000000D2					call	print_value ; for colors:)
							
							mwritecharspace
 000004A2  50		     1		push 	eax
 000004A3  B0 20	     1		mov		al, ' '
 000004A5  E8 00000000 E     1		call	WriteChar
 000004AA  58		     1		pop		eax
							mwritecharpipe
 000004AB  50		     1		push 	eax
 000004AC  B0 7C	     1		mov		al, '|'
 000004AE  E8 00000000 E     1		call	WriteChar
 000004B3  58		     1		pop		eax
							mwritecharspace
 000004B4  50		     1		push 	eax
 000004B5  B0 20	     1		mov		al, ' '
 000004B7  E8 00000000 E     1		call	WriteChar
 000004BC  58		     1		pop		eax
							
 000004BD  83 C6 02					add 	esi, 2 ;next element queued up
							
 000004C0  E2 D3					loop 	top_col
								
 000004C2  59					pop		ecx
						
 000004C3  FE C6				inc		dh ;move down one layer
 000004C5  E8 00000000 E			call	gotoXY
						mwritestring g_bar ; print a bar
 000004CA  52		     1		push 	edx
 000004CB  BA 0000007F R     1		mov		edx, OFFSET g_bar
 000004D0  E8 00000000 E     1		call	WriteString
 000004D5  5A		     1		pop		edx
						
 000004D6  E2 95				loop	top_row
					
					;Printing is done.
					
 000004D8  B8 00000002			mov		eax, green
 000004DD  E8 00000000 E		call	SetTextColor
					
 000004E2  FE C6			inc		dh ;move down one layer
 000004E4  E8 00000000 E		call	gotoXY
					mwritestring g_numbers
 000004E9  52		     1		push 	edx
 000004EA  BA 0000009F R     1		mov		edx, OFFSET g_numbers
 000004EF  E8 00000000 E     1		call	WriteString
 000004F4  5A		     1		pop		edx
					
 000004F5  B8 0000000F			mov		eax, white
 000004FA  E8 00000000 E		call	SetTextColor
					
 000004FF  80 C6 02			add		dh, 2
					
 00000502  B8 0000000F			mov		eax, 15
 00000507  E8 00000000 E		call	SetTextColor
					
 0000050C  5D				pop		ebp
					ret
 0000050D  5A		   *	    pop    edx
 0000050E  59		   *	    pop    ecx
 0000050F  58		   *	    pop    eax
 00000510  C3		   *	    ret    00000h

 00000511			print_grid ENDP

				;===============================================
 00000511			clear_line PROC
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 00000511  55				push	ebp
 00000512  8B EC			mov		ebp, esp

					;mov		dh, grid_offset_top + 17
					;mov		dl, grid_offset_side
					
 00000514  B9 00000041			mov		ecx, 65
					
 00000519				spaces_print_top:
					
						mwritecharspace
 00000519  50		     1		push 	eax
 0000051A  B0 20	     1		mov		al, ' '
 0000051C  E8 00000000 E     1		call	WriteChar
 00000521  58		     1		pop		eax
						
					
 00000522  E2 F5			loop 	spaces_print_top
					
 00000524  E8 00000000 E		call	GotoXY
					
 00000529  5D				pop		ebp
 0000052A  C3				ret

 0000052B			clear_line ENDP

				;===============================================
 0000052B			drop_to_bottom PROC USES ecx eax ebx edx esi
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires: that there is no value in the top element of that column
				;Returns:
				;Description:
				;===============================================

 0000052B  51		   *	    push   ecx
 0000052C  50		   *	    push   eax
 0000052D  53		   *	    push   ebx
 0000052E  52		   *	    push   edx
 0000052F  56		   *	    push   esi
 00000530  55				push	ebp
 00000531  8B EC			mov		ebp, esp
					
 00000533  BE 000000F5 R		mov		esi, OFFSET connect4_grid
 00000538  B9 00000006			mov		ecx, 6; set the counter to loop 6 times
 0000053D  BB 00000000			mov		ebx, 0; compare to this because cannot compare to literal
					
 00000542  0F B7 05			movzx	eax, player_col ; i.e.e col 5
	   0000000C R
 00000549  6B C0 02			imul	eax, 2 ; 5 --> 10
 0000054C  03 F0			add 	esi, eax
					
 0000054E  8B C6			mov		eax, esi ; move the pointer to the first element int eax.
 00000550  83 C0 0E			add		eax, 14 ;add 14 to eax to get the next element down the column.
					
 00000553				drop_to_bottom_loop_top:
					
 00000553  66| 39 18				cmp 	[eax], bx ; check if the next value down is zero
 00000556  74 02				je		loop_again
 00000558  EB 07				jmp		fill_esi 	
						
 0000055A					loop_again:
						
 0000055A  8B F0				mov		esi, eax
 0000055C  83 C0 0E				add		eax, 14
 0000055F  E2 F2				loop	drop_to_bottom_loop_top
					
					
 00000561				fill_esi:
 00000561  0F B7 1D				movzx	ebx, player_number
	   00000004 R
 00000568  66| 89 1E				mov		[esi], bx
 0000056B  EB 00				jmp		fill_end
					
					
 0000056D				fill_end:
 0000056D  5D				pop		ebp
					ret
 0000056E  5E		   *	    pop    esi
 0000056F  5A		   *	    pop    edx
 00000570  5B		   *	    pop    ebx
 00000571  58		   *	    pop    eax
 00000572  59		   *	    pop    ecx
 00000573  C3		   *	    ret    00000h

 00000574			drop_to_bottom ENDP

				;===============================================
 00000574			print_value PROC USES eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 00000574  50		   *	    push   eax
 00000575  55				push	ebp
 00000576  8B EC			mov		ebp, esp
					
 00000578  8B D8			mov		ebx, eax
					
 0000057A  E8 00000000 E		call	GetTextColor
 0000057F  50				push	eax; push original color
					
 00000580  83 FB 01			cmp		ebx,1
 00000583  7C 04			jl		black_color
 00000585  74 17			je		red_color
 00000587  7F 2A			jg		yellow_color
					
 00000589				black_color:
						
 00000589  B8 00000000				mov		eax, black*16
 0000058E  E8 00000000 E			call	SetTextColor
						mwritecharspace
 00000593  50		     1		push 	eax
 00000594  B0 20	     1		mov		al, ' '
 00000596  E8 00000000 E     1		call	WriteChar
 0000059B  58		     1		pop		eax
 0000059C  EB 2A				jmp 	print_value_end
						
 0000059E				red_color:
						
 0000059E  B8 00000040				mov		eax, red*16
 000005A3  E8 00000000 E			call	SetTextColor
						mwritecharspace
 000005A8  50		     1		push 	eax
 000005A9  B0 20	     1		mov		al, ' '
 000005AB  E8 00000000 E     1		call	WriteChar
 000005B0  58		     1		pop		eax
 000005B1  EB 15				jmp 	print_value_end
						
 000005B3				yellow_color:
						
 000005B3  B8 000000E0				mov		eax, yellow*16
 000005B8  E8 00000000 E			call	SetTextColor
						mwritecharspace
 000005BD  50		     1		push 	eax
 000005BE  B0 20	     1		mov		al, ' '
 000005C0  E8 00000000 E     1		call	WriteChar
 000005C5  58		     1		pop		eax
 000005C6  EB 00				jmp 	print_value_end
					
 000005C8	print_value_end:
					
 000005C8  58				pop		eax
 000005C9  E8 00000000 E		call	SetTextColor
					
 000005CE  5D				pop		ebp
					ret
 000005CF  58		   *	    pop    eax
 000005D0  C3		   *	    ret    00000h

 000005D1			print_value ENDP

				END main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/17/19 00:43:53
CONNECT FOUR     (connect4.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

msetval  . . . . . . . . . . . .	Proc
mwincheck  . . . . . . . . . . .	Proc
mwritecharpipe . . . . . . . . .	Proc
mwritecharspace  . . . . . . . .	Proc
mwritedecfrom  . . . . . . . . .	Proc
mwritestringnewline  . . . . . .	Proc
mwritestring . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_BSS . . . . . . . . . . . . . .	32 Bit	 0000000E Para	  Public  'BSS'  
_DATA  . . . . . . . . . . . . .	32 Bit	 0000015F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005D1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
check_diagonal_down  . . . . . .	P Near	 00000355 _TEXT	Length= 00000045 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 00000368 _TEXT	
  col_loop_top . . . . . . . . .	L Near	 00000370 _TEXT	
  return_diagonal_down_success .	L Near	 0000038F _TEXT	
  return_diagonal_down . . . . .	L Near	 00000394 _TEXT	
check_diagonal_up  . . . . . . .	P Near	 000002C8 _TEXT	Length= 00000049 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 000002DB _TEXT	
  col_loop_top . . . . . . . . .	L Near	 000002E3 _TEXT	
  return_diagonal_up_success . .	L Near	 00000306 _TEXT	
  return_diagonal_up . . . . . .	L Near	 0000030B _TEXT	
check_for_win  . . . . . . . . .	P Near	 0000040E _TEXT	Length= 00000030 Public STDCALL
  check_loop_top . . . . . . . .	L Near	 00000419 _TEXT	
  failed . . . . . . . . . . . .	L Near	 00000432 _TEXT	
  check_proc_end . . . . . . . .	L Near	 00000439 _TEXT	
check_horizontal . . . . . . . .	P Near	 000001BE _TEXT	Length= 00000045 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 000001D1 _TEXT	
  col_loop_top . . . . . . . . .	L Near	 000001D9 _TEXT	
  return_horizontal_success  . .	L Near	 000001F8 _TEXT	
  return_horizontal  . . . . . .	L Near	 000001FD _TEXT	
check_vertical . . . . . . . . .	P Near	 00000243 _TEXT	Length= 00000045 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 00000256 _TEXT	
  col_loop_top . . . . . . . . .	L Near	 0000025E _TEXT	
  return_vertical_success  . . .	L Near	 0000027D _TEXT	
  return_vertical  . . . . . . .	L Near	 00000282 _TEXT	
clear_line . . . . . . . . . . .	P Near	 00000511 _TEXT	Length= 0000001A Public STDCALL
  spaces_print_top . . . . . . .	L Near	 00000519 _TEXT	
drop_to_bottom . . . . . . . . .	P Near	 0000052B _TEXT	Length= 00000049 Public STDCALL
  drop_to_bottom_loop_top  . . .	L Near	 00000553 _TEXT	
  loop_again . . . . . . . . . .	L Near	 0000055A _TEXT	
  fill_esi . . . . . . . . . . .	L Near	 00000561 _TEXT	
  fill_end . . . . . . . . . . .	L Near	 0000056D _TEXT	
get_value_at . . . . . . . . . .	P Near	 000003DE _TEXT	Length= 00000030 Public STDCALL
load_diagonal_down . . . . . . .	P Near	 0000039A _TEXT	Length= 00000044 Public STDCALL
  diagonal_down_load_loop_top  .	L Near	 000003A9 _TEXT	
load_diagonal_up . . . . . . . .	P Near	 00000311 _TEXT	Length= 00000044 Public STDCALL
  diagonal_up_load_loop_top  . .	L Near	 00000320 _TEXT	
load_horizontal  . . . . . . . .	P Near	 00000203 _TEXT	Length= 00000040 Public STDCALL
  horizontal_load_loop_top . . .	L Near	 00000212 _TEXT	
load_vertical  . . . . . . . . .	P Near	 00000288 _TEXT	Length= 00000040 Public STDCALL
  vertical_load_loop_top . . . .	L Near	 00000297 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001BE Public STDCALL
  top_main . . . . . . . . . . .	L Near	 00000000 _TEXT	
  computer_switch_no_change  . .	L Near	 0000003E _TEXT	
  loop_main_top  . . . . . . . .	L Near	 00000068 _TEXT	
  top_turn . . . . . . . . . . .	L Near	 0000007F _TEXT	
  computer_turn  . . . . . . . .	L Near	 000000A8 _TEXT	
  player_turn  . . . . . . . . .	L Near	 000000BA _TEXT	
  win_check_label  . . . . . . .	L Near	 000000F8 _TEXT	
  add_one  . . . . . . . . . . .	L Near	 00000131 _TEXT	
  swap_done  . . . . . . . . . .	L Near	 00000132 _TEXT	
  win_for_current_player . . . .	L Near	 00000144 _TEXT	
  cat_game . . . . . . . . . . .	L Near	 00000183 _TEXT	
  play_again . . . . . . . . . .	L Near	 00000196 _TEXT	
  hard_stop  . . . . . . . . . .	L Near	 000001B7 _TEXT	
print_grid . . . . . . . . . . .	P Near	 0000043E _TEXT	Length= 000000D3 Public STDCALL
  top_row  . . . . . . . . . . .	L Near	 0000046D _TEXT	
  top_col  . . . . . . . . . . .	L Near	 00000495 _TEXT	
print_value  . . . . . . . . . .	P Near	 00000574 _TEXT	Length= 0000005D Public STDCALL
  black_color  . . . . . . . . .	L Near	 00000589 _TEXT	
  red_color  . . . . . . . . . .	L Near	 0000059E _TEXT	
  yellow_color . . . . . . . . .	L Near	 000005B3 _TEXT	
  print_value_end  . . . . . . .	L Near	 000005C8 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DBG_1  . . . . . . . . . . . . .	Byte	 000000BC _DATA	
DBG_2  . . . . . . . . . . . . .	Byte	 000000C8 _DATA	
DBG_3  . . . . . . . . . . . . .	Byte	 000000D2 _DATA	
DBG_4  . . . . . . . . . . . . .	Byte	 000000DF _DATA	
DBG_5  . . . . . . . . . . . . .	Byte	 000000EE _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cat_game_printout  . . . . . . .	Byte	 0000001C _DATA	
check_array  . . . . . . . . . .	Word	 00000157 _DATA	
cols . . . . . . . . . . . . . .	Number	 00000007h   
computer_switch  . . . . . . . .	Word	 00000008 _BSS	
connect4_grid  . . . . . . . . .	Word	 000000F5 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
g_bar  . . . . . . . . . . . . .	Byte	 0000007F _DATA	
g_numbers  . . . . . . . . . . .	Byte	 0000009F _DATA	
get_col  . . . . . . . . . . . .	Word	 00000002 _BSS	
get_row  . . . . . . . . . . . .	Word	 00000000 _BSS	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
grid_offset_side . . . . . . . .	Number	 00000010h   
grid_offset_top  . . . . . . . .	Number	 00000003h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
play_again_prompt  . . . . . . .	Byte	 00000039 _DATA	
player_1 . . . . . . . . . . . .	Byte	 0000004E _DATA	
player_col_entry_2 . . . . . . .	Byte	 00000056 _DATA	
player_col . . . . . . . . . . .	Word	 0000000C _BSS	
player_count_prompt  . . . . . .	Byte	 0000000A _DATA	
player_number  . . . . . . . . .	Word	 00000004 _BSS	
player_win_2 . . . . . . . . . .	Byte	 00000079 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rows . . . . . . . . . . . . . .	Number	 00000007h   
turns_played_total . . . . . . .	Word	 00000006 _BSS	
turns_to_cat . . . . . . . . . .	Number	 00000031h   
welcome_message  . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winning_player . . . . . . . . .	Word	 0000000A _BSS	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
