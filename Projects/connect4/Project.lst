Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/17/19 14:20:37
CONNECT FOUR     (connect4.asm				     Page 1 - 1


				TITLE CONNECT FOUR     (connect4.asm)

				; Author: Lyell Read
				; Course / Project ID: CS271/connect4           Timeframe: 1/22/2019 - 3/17/2019
				; Description: Play the game connect 4 with a 7*7 grid. Either 2p or p vs cpu. Text based. Yeah. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				.stack 4096


					;===============================
					;SET UP MACROS USED THROUGHOUT
					;===============================

				mwritestring MACRO string
					push 	edx
					mov		edx, OFFSET string
					call	WriteString
					pop		edx
				ENDM

				mwritestringnewline MACRO string
					push 	edx
					mov		edx, OFFSET string
					call	WriteString
					call	CrLF
					pop		edx
				ENDM

				mwritecharpipe MACRO string
					push 	eax
					mov		al, '|'
					call	WriteChar
					pop		eax
				ENDM

				mwritecharspace MACRO string
					push 	eax
					mov		al, ' '
					call	WriteChar
					pop		eax
				ENDM

				mwincheck MACRO
					call	check_horizontal
					add		eax, edx
					call	check_vertical
					add		eax, edx
					call	check_diagonal_down
					add		eax, edx
					call	check_diagonal_up
					add		eax, edx
				ENDM
					
					
				msetval MACRO value, element, array_name
					push	esi
					push	eax
					mov		eax, value
					mov		esi, OFFSET array_name
					mov		[esi + (element * 2)], ax
					pop		eax
					pop		esi
				ENDM

				mwritedecfrom MACRO reg
					push 	eax
					mov		eax, reg
					call	WriteDec
					pop		eax
				ENDM

				mresettextcolor MACRO
					push	eax
					
					mov		eax, white + (black * 16)
					call	SetTextColor
					
					pop		eax
				ENDM

				mclearhome MACRO
					push 	edx
					push	eax
					
					call	Clrscr

					mov		edx, 0
					call	GotoXY
					
					mresettextcolor
					
					pop		eax
					pop		edx
				ENDM

				mclearandgotoline MACRO
					push	edx
					
					mov		dh, grid_offset_top + 17;total offset from top where this line is.
					mov		dl, grid_offset_side 
					
					call 	gotoXY
					call	clear_line
					
					pop		edx
				ENDM

					;===============================
					;          CONSTANTS
					;===============================
					
 = 00000007			rows				EQU		7
 = 00000007			cols				EQU		7
 = 00000032			turns_to_cat		EQU		50 ;rows * cols + 1; maybe there's a neater way?
 = 00000010			grid_offset_side	EQU		16 ;the space in characters between the terminal left edge and the printout of the grid.
 = 00000003			grid_offset_top		EQU		3 ;the space in characters between the top of the terminal and the top edge of the grid


					;===============================
					;         DATA SEGMENT
					;===============================

 00000000			.data
					
				;Text Segments
 00000000 57 65 6C 63 6F	welcome_message				BYTE	"Welcome. ",0
	   6D 65 2E 20 00
 0000000A 50 6C 61 79 65	player_count_prompt			BYTE	"Players (1 or 2):",0
	   72 73 20 28 31
	   20 6F 72 20 32
	   29 3A 00
 0000001C 59 6F 75 20 64	cat_game_printout			BYTE	"You done did a cat game boi.  ",0
	   6F 6E 65 20 64
	   69 64 20 61 20
	   63 61 74 20 67
	   61 6D 65 20 62
	   6F 69 2E 20 20
	   00
 0000003B 50 6C 61 79 20	play_again_prompt			BYTE	"Play Again (1 or 0):",0
	   41 67 61 69 6E
	   20 28 31 20 6F
	   72 20 30 29 3A
	   00
 00000050 50 6C 61 79 65	player_1					BYTE	"Player ",0
	   72 20 00
 00000058 49 6E 76 61 6C	invalid_entry				BYTE	"Invalid. Re- Enter:",0
	   69 64 2E 20 52
	   65 2D 20 45 6E
	   74 65 72 3A 00
 0000006C 2C 20 70 6C 65	player_col_entry_2			BYTE	", please enter the col to play in:",0	
	   61 73 65 20 65
	   6E 74 65 72 20
	   74 68 65 20 63
	   6F 6C 20 74 6F
	   20 70 6C 61 79
	   20 69 6E 3A 00
 0000008F 20 57 4F 4E 2E	player_win_2				BYTE	" WON.  ",0
	   20 20 00

 00000097 20 2B 2D 2D 2D	g_bar						BYTE	" +---+---+---+---+---+---+---+ ",0
	   2B 2D 2D 2D 2B
	   2D 2D 2D 2B 2D
	   2D 2D 2B 2D 2D
	   2D 2B 2D 2D 2D
	   2B 2D 2D 2D 2B
	   20 00
 000000B7 20 20 20 30 20	g_numbers					BYTE	"   0   1   2   3   4   5   6",0
	   20 20 31 20 20
	   20 32 20 20 20
	   33 20 20 20 34
	   20 20 20 35 20
	   20 20 36 00

 000000D4 48 4F 52 49 5A	DBG_1						BYTE	"HORIZONTAL:",0
	   4F 4E 54 41 4C
	   3A 00
 000000E0 56 45 52 54 49	DBG_2						BYTE	"VERTICAL:",0
	   43 41 4C 3A 00
 000000EA 44 49 41 47 4F	DBG_3						BYTE	"DIAGONAL-UP:",0
	   4E 41 4C 2D 55
	   50 3A 00
 000000F7 44 49 41 47 4F	DBG_4						BYTE	"DIAGONAL-DOWN:",0
	   4E 41 4C 2D 44
	   4F 57 4E 3A 00
 00000106 56 61 6C 75 65	DBG_5						BYTE	"Value:",0
	   3A 00
				;Array Defenition
 0000010D  00000031 [		connect4_grid				WORD	49 DUP (0)
	    0000
	   ]
													
													
 0000016F  00000004 [		check_array					WORD	4 DUP(0)
	    0000
	   ]

 00000000			.data?
				;Variable Defenitions
 00000000 0000			get_row						WORD	?	;(0..6) will be used to store the row of a get call	
 00000002 0000			get_col						WORD	?	;(0..6) will be used to store the col of a get call
 00000004 0000			player_number				WORD	?	;(1|2) Measures who has just played
 00000006 0000			turns_played_total			WORD	?	;will increment with each turn, checking against turns_to_cat
 00000008 0000			computer_switch				WORD	?	;(0|1) Measures weather the player wants 2p or 1p respectively
 0000000A 0000			winning_player				WORD	?	;(1|2) set by win_check alg.
 0000000C 0000			player_col					WORD	?	;(0..6) Choice of where to play.


 00000000			.code
 00000000			main PROC
					
 00000000				top_main:

					;===============================================================
					;SET UP ALL VALUES TO ESSENTIALLY "RESET" THE GAME
					;=============================================================== note: add array blanking! 

					mwritestringnewline welcome_message ; welcome message
 00000000  52		     1		push 	edx
 00000001  BA 00000000 R     1		mov		edx, OFFSET welcome_message
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  E8 00000000 E     1		call	CrLF
 00000010  5A		     1		pop		edx
					mwritestring player_count_prompt ; Ask the user how many players they want (SET COMPUTER SWITCH)
 00000011  52		     1		push 	edx
 00000012  BA 0000000A R     1		mov		edx, OFFSET player_count_prompt
 00000017  E8 00000000 E     1		call	WriteString
 0000001C  5A		     1		pop		edx
					
					;get & check input
 0000001D  BA 00000001			mov		edx, 1
 00000022  BB 00000002			mov		ebx, 2
 00000027  B9 00000000			mov		ecx, 0 ; set flag
 0000002C  E8 0000026C			call	get_input_on_range
					
 00000031  E8 00000000 E		call	CrLF
 00000036  66| C7 05			mov		computer_switch, 0
	   00000008 R
	   0000
 0000003F  83 F8 02			cmp		eax, 2 ;if the user has chosen two player, jump to bottom
 00000042  74 09			je		computer_switch_no_change

 00000044  66| C7 05			mov		computer_switch, 1
	   00000008 R
	   0001
 0000004D			computer_switch_no_change:
 0000004D  66| C7 05			mov		player_number, 1;set the current player to 1 as p1 will start regardless of player mode...
	   00000004 R
	   0001
 00000056  66| C7 05			mov		turns_played_total, 1;set the total turns played to 1 as we are resetting the game
	   00000006 R
	   0001
 0000005F  66| C7 05			mov		winning_player, 0;set the winner to 0
	   0000000A R
	   0000
					
					;Zero the grid out (in case of play again)
 00000068  B9 00000031			mov		ecx, 49
 0000006D  B8 00000000			mov		eax, 0
 00000072  BE 0000010D R		mov		esi, OFFSET connect4_grid
 00000077				loop_main_top:
 00000077  66| 89 06				mov		[esi],ax 
 0000007A  83 C6 02				add		esi, 2
 0000007D  E2 F8				loop	loop_main_top	
					
					;===============================================================
					;LET THE GAME BEGIN! < < < < < < < < < < < < < < < < < < < < < < 
					;===============================================================	
					
					; call	CrLF
					; call	Waitmsg
 0000007F  E8 00000000 E		call	clrscr
					
 00000084			top_turn:

					;print that griddy boi
 00000084  E8 000004DB			call	print_grid
					
					;if turns compeleted is the same as turns possible, call it a CAT GAME!
 00000089  66| 83 3D			cmp		turns_played_total, turns_to_cat
	   00000006 R 32
 00000091  0F 84 000000EA		je		cat_game
					
					;check if the player number is 1, and if so, send to play a player turn
 00000097  66| 83 3D			cmp		player_number, 1
	   00000004 R 01
 0000009F  74 13			je		player_turn
					
					;we are either player 2 or CPU now, so check CPU flag

 000000A1  66| 83 3D			cmp		computer_switch, 1
	   00000008 R 01
 000000A9  74 02			je		computer_turn
 000000AB  EB 07			jmp		player_turn ;we are player 2.
					
						
 000000AD			computer_turn: ;NOTE: if CPU is playing, then player_num =2

					;===============================
					;        Computer Turn
					;===============================
					
					;play CPU turn lol
 000000AD  E8 0000014F			call	computer_input_validation
 000000B2  EB 3A			jmp		win_check_label
					
 000000B4			player_turn:

					;===============================
					;         Player Turn
					;===============================

					mclearandgotoline
 000000B4  52		     1		push	edx
 000000B5  B6 14	     1		mov		dh, grid_offset_top + 17;total offset from top where this line is.
 000000B7  B2 10	     1		mov		dl, grid_offset_side 
 000000B9  E8 00000000 E     1		call 	gotoXY
 000000BE  E8 0000056C	     1		call	clear_line
 000000C3  5A		     1		pop		edx
					
					mwritestring player_1
 000000C4  52		     1		push 	edx
 000000C5  BA 00000050 R     1		mov		edx, OFFSET player_1
 000000CA  E8 00000000 E     1		call	WriteString
 000000CF  5A		     1		pop		edx
 000000D0  66| A1			mov		ax, player_number
	   00000004 R
 000000D6  E8 00000000 E		call	WriteDec
					mwritestring player_col_entry_2
 000000DB  52		     1		push 	edx
 000000DC  BA 0000006C R     1		mov		edx, OFFSET player_col_entry_2
 000000E1  E8 00000000 E     1		call	WriteString
 000000E6  5A		     1		pop		edx
					
 000000E7  E8 0000013C			call	player_input_validation
					
 000000EC  EB 00			jmp		win_check_label
					
 000000EE			win_check_label:

 000000EE  E8 00000558			call	drop_to_bottom

 000000F3  B8 00000000			mov		eax, 0 ;eax is used by macro to keep track of wins
					mwincheck
 000000F8  E8 000001E7	     1		call	check_horizontal
 000000FD  03 C2	     1		add		eax, edx
 000000FF  E8 00000265	     1		call	check_vertical
 00000104  03 C2	     1		add		eax, edx
 00000106  E8 00000370	     1		call	check_diagonal_down
 0000010B  03 C2	     1		add		eax, edx
 0000010D  E8 000002DC	     1		call	check_diagonal_up
 00000112  03 C2	     1		add		eax, edx
					
 00000114  83 F8 00			cmp		eax, 0
 00000117  75 21			jne		win_for_current_player
					
					;swap player_number to initiate the next turn..
 00000119  66| A1			mov		ax, player_number
	   00000004 R
 0000011F  83 F8 01			cmp		eax, 1
 00000122  74 03			je		add_one
 00000124  48				dec		eax
 00000125  EB 01			jmp		swap_done
 00000127				add_one:
 00000127  40				inc		eax
 00000128				swap_done:
 00000128  66| A3			mov		player_number, ax
	   00000004 R
					
 0000012E  66| FF 05			inc		turns_played_total
	   00000006 R
					
					;jump back to top of turn "loop".
 00000135  E9 FFFFFF4A			jmp		top_turn
					
 0000013A			win_for_current_player:
					
 0000013A  E8 00000425			call	print_grid
					
					mclearandgotoline
 0000013F  52		     1		push	edx
 00000140  B6 14	     1		mov		dh, grid_offset_top + 17;total offset from top where this line is.
 00000142  B2 10	     1		mov		dl, grid_offset_side 
 00000144  E8 00000000 E     1		call 	gotoXY
 00000149  E8 000004E1	     1		call	clear_line
 0000014E  5A		     1		pop		edx
					mresettextcolor
 0000014F  50		     1		push	eax
 00000150  B8 0000000F	     1		mov		eax, white + (black * 16)
 00000155  E8 00000000 E     1		call	SetTextColor
 0000015A  58		     1		pop		eax

					mwritestring player_1
 0000015B  52		     1		push 	edx
 0000015C  BA 00000050 R     1		mov		edx, OFFSET player_1
 00000161  E8 00000000 E     1		call	WriteString
 00000166  5A		     1		pop		edx
 00000167  0F B7 05			movzx	eax, player_number
	   00000004 R
 0000016E  E8 00000000 E		call	WriteDec
					mwritestring player_win_2
 00000173  52		     1		push 	edx
 00000174  BA 0000008F R     1		mov		edx, OFFSET player_win_2
 00000179  E8 00000000 E     1		call	WriteString
 0000017E  5A		     1		pop		edx
					
 0000017F  EB 2A			jmp play_again

 00000181			cat_game:
					
					
					mclearandgotoline
 00000181  52		     1		push	edx
 00000182  B6 14	     1		mov		dh, grid_offset_top + 17;total offset from top where this line is.
 00000184  B2 10	     1		mov		dl, grid_offset_side 
 00000186  E8 00000000 E     1		call 	gotoXY
 0000018B  E8 0000049F	     1		call	clear_line
 00000190  5A		     1		pop		edx
					mresettextcolor
 00000191  50		     1		push	eax
 00000192  B8 0000000F	     1		mov		eax, white + (black * 16)
 00000197  E8 00000000 E     1		call	SetTextColor
 0000019C  58		     1		pop		eax
					mwritestring cat_game_printout
 0000019D  52		     1		push 	edx
 0000019E  BA 0000001C R     1		mov		edx, OFFSET cat_game_printout
 000001A3  E8 00000000 E     1		call	WriteString
 000001A8  5A		     1		pop		edx

 000001A9  EB 00			jmp		play_again
					
					
 000001AB			play_again:

 000001AB  E8 00000000 E		call	Waitmsg
					
					mclearhome
 000001B0  52		     1		push 	edx
 000001B1  50		     1		push	eax
 000001B2  E8 00000000 E     1		call	Clrscr
 000001B7  BA 00000000	     1		mov		edx, 0
 000001BC  E8 00000000 E     1		call	GotoXY
 000001C1  50		     2		push	eax
 000001C2  B8 0000000F	     2		mov		eax, white + (black * 16)
 000001C7  E8 00000000 E     2		call	SetTextColor
 000001CC  58		     2		pop		eax
 000001CD  58		     1		pop		eax
 000001CE  5A		     1		pop		edx
					;print play again message
					mwritestring play_again_prompt
 000001CF  52		     1		push 	edx
 000001D0  BA 0000003B R     1		mov		edx, OFFSET play_again_prompt
 000001D5  E8 00000000 E     1		call	WriteString
 000001DA  5A		     1		pop		edx

					;get & check input
 000001DB  BA 00000000			mov		edx, 0
 000001E0  BB 00000001			mov		ebx, 1
 000001E5  B9 00000000			mov		ecx, 0 ; set flag to not print to line
 000001EA  E8 000000AE			call	get_input_on_range
					
 000001EF  83 F8 01			cmp		eax, 1
 000001F2  0F 84 FFFFFE08		je		top_main
 000001F8  EB 00			jmp		hard_stop
					
 000001FA			hard_stop:
					
					exit	; exit to operating system
 000001FA  6A 00	   *	    push   +000000000h
 000001FC  E8 00000000 E   *	    call   ExitProcess
 00000201			main ENDP

				;===============================================
 00000201			computer_input_validation PROC USES eax edx ebx
				;
				;Pre-Conditions: 
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 00000201  50		   *	    push   eax
 00000202  52		   *	    push   edx
 00000203  53		   *	    push   ebx
 00000204  55				push	ebp
 00000205  8B EC			mov		ebp, esp
					
 00000207				col_check_top:

 00000207  B8 00000007			mov		eax, 7; set rand high range
 0000020C  E8 00000000 E		call	RandomRange ; rand on 0..6
					
					; ==== INPUT CHECK -- COL EMPTY ====
 00000211  E8 0000005F			call	check_column_playable
					
					;check_column_playable returns in edx 1 = OK 0 = FULL
 00000216  83 FA 01			cmp		edx, 1
 00000219  74 02			je		fill_and_quit
 0000021B  EB EA			jmp		col_check_top ; try again at generating a good random value... please ;)
						
 0000021D				fill_and_quit:
						
 0000021D  66| A3				mov		player_col, ax
	   0000000C R
					
 00000223  5D				pop		ebp
					ret
 00000224  5B		   *	    pop    ebx
 00000225  5A		   *	    pop    edx
 00000226  58		   *	    pop    eax
 00000227  C3		   *	    ret    00000h

 00000228			computer_input_validation ENDP

				;===============================================
 00000228			player_input_validation PROC USES eax edx ebx
				;
				;Pre-Conditions: 
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 00000228  50		   *	    push   eax
 00000229  52		   *	    push   edx
 0000022A  53		   *	    push   ebx
 0000022B  55				push	ebp
 0000022C  8B EC			mov		ebp, esp
					
 0000022E				col_check_top:
					
 0000022E  B9 00000001			mov		ecx, 1 ; set flag to print on line.
 00000233  BB 00000006			mov		ebx, 6 ; set upper range for input check part 1
 00000238  BA 00000000			mov		edx, 0 ; set lower range      "          "
					
					;call	ReadDec ; --> eax == col number
					
					; ==== INPUT CHECK -- RANGE ====
 0000023D  E8 0000005B			call	get_input_on_range
					
					; ==== INPUT CHECK -- COL EMPTY ====
 00000242  E8 0000002E			call	check_column_playable
					
					;check_column_playable returns in edx 1 = OK 0 = FULL
 00000247  83 FA 01			cmp		edx, 1
 0000024A  74 1E			je		fill_and_quit
					
 0000024C				retry_with_error:
					
						mclearandgotoline
 0000024C  52		     1		push	edx
 0000024D  B6 14	     1		mov		dh, grid_offset_top + 17;total offset from top where this line is.
 0000024F  B2 10	     1		mov		dl, grid_offset_side 
 00000251  E8 00000000 E     1		call 	gotoXY
 00000256  E8 000003D4	     1		call	clear_line
 0000025B  5A		     1		pop		edx
						mwritestring invalid_entry
 0000025C  52		     1		push 	edx
 0000025D  BA 00000058 R     1		mov		edx, OFFSET invalid_entry
 00000262  E8 00000000 E     1		call	WriteString
 00000267  5A		     1		pop		edx
 00000268  EB C4				jmp		col_check_top
						
 0000026A				fill_and_quit:
						
 0000026A  66| A3				mov		player_col, ax
	   0000000C R
					
 00000270  5D				pop		ebp
					ret
 00000271  5B		   *	    pop    ebx
 00000272  5A		   *	    pop    edx
 00000273  58		   *	    pop    eax
 00000274  C3		   *	    ret    00000h

 00000275			player_input_validation ENDP

				;===============================================
 00000275			check_column_playable PROC USES eax esi
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 00000275  50		   *	    push   eax
 00000276  56		   *	    push   esi
 00000277  55				push	ebp
 00000278  8B EC			mov		ebp, esp

 0000027A  BE 0000010D R		mov		esi, OFFSET connect4_grid
 0000027F  6B C0 02			imul	eax, 2 ; 2 -> 4 (size conversion)
					
 00000282  03 F0			add		esi, eax
 00000284  66| 39 16			cmp 	[esi], dx ;NOTE: edx==0 at this time. check if target col's top cell is empty
					
 00000287  74 02			je		col_is_free
 00000289  75 07			jne		col_is_full
					
 0000028B				col_is_free:
 0000028B  BA 00000001				mov		edx, 1 ; success
 00000290  EB 07				jmp		return_to_parent

 00000292				col_is_full:
 00000292  BA 00000000				mov		edx, 0 ; success
 00000297  EB 00				jmp		return_to_parent

					
 00000299				return_to_parent:
 00000299  5D				pop		ebp
					ret
 0000029A  5E		   *	    pop    esi
 0000029B  58		   *	    pop    eax
 0000029C  C3		   *	    ret    00000h

 0000029D			check_column_playable ENDP

				;===============================================
 0000029D			get_input_on_range PROC
				;
				;Pre-Conditions: UPPER in ebx. Lower in edx. Result in eax
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 0000029D  55				push	ebp
 0000029E  8B EC			mov		ebp, esp

					;ebx = upper
					;edx = lower
					
					;text string already printed. Take input:
 000002A0				value_entry_top:
					
 000002A0  E8 00000000 E		call	ReadDec
 000002A5  3B C3			cmp		eax, ebx ; eax <= ebx
 000002A7  7F 06			jg		error_message
 000002A9  3B C2			cmp		eax, edx ; eax >= edx
 000002AB  7C 02			jl		error_message
 000002AD  EB 33			jmp		value_ok
					
 000002AF				error_message:

 000002AF  83 F9 01				cmp		ecx, 1
 000002B2  74 10				je		print_on_line
 000002B4  EB 00				jmp		print_normal
						
 000002B6					print_normal:
							mwritestring invalid_entry
 000002B6  52		     1		push 	edx
 000002B7  BA 00000058 R     1		mov		edx, OFFSET invalid_entry
 000002BC  E8 00000000 E     1		call	WriteString
 000002C1  5A		     1		pop		edx
 000002C2  EB DC					jmp		value_entry_top
						
 000002C4					print_on_line:
							mclearandgotoline
 000002C4  52		     1		push	edx
 000002C5  B6 14	     1		mov		dh, grid_offset_top + 17;total offset from top where this line is.
 000002C7  B2 10	     1		mov		dl, grid_offset_side 
 000002C9  E8 00000000 E     1		call 	gotoXY
 000002CE  E8 0000035C	     1		call	clear_line
 000002D3  5A		     1		pop		edx
							mwritestring invalid_entry
 000002D4  52		     1		push 	edx
 000002D5  BA 00000058 R     1		mov		edx, OFFSET invalid_entry
 000002DA  E8 00000000 E     1		call	WriteString
 000002DF  5A		     1		pop		edx
 000002E0  EB BE					jmp		value_entry_top
							
 000002E2				value_ok:
					
 000002E2  5D				pop		ebp
 000002E3  C3				ret

 000002E4			get_input_on_range ENDP

					;===============================
					;      H O R I Z O N T A L
					;===============================

				;===============================================
 000002E4			check_horizontal PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================
					

 000002E4  56		   *	    push   esi
 000002E5  51		   *	    push   ecx
 000002E6  53		   *	    push   ebx
 000002E7  50		   *	    push   eax
 000002E8  55				push	ebp
 000002E9  8B EC			mov		ebp, esp
 000002EB  0F B7 05			movzx	eax, player_number
	   00000004 R
					
 000002F2  B9 00000007			mov		ecx, 7 ;rows to visit
 000002F7				row_loop_top:
					
 000002F7  51					push	ecx
 000002F8  8B D9				mov		ebx, ecx
 000002FA  B9 00000004				mov		ecx, 4
						
 000002FF					col_loop_top:
						
 000002FF  4B						dec		ebx ; row
 00000300  49						dec		ecx ; col

							;======================
							;mwritecharpipe
							;mwritedecfrom ebx
							;mwritedecfrom ecx
							
 00000301  E8 00000023					call	load_horizontal
 00000306  E8 00000229					call	check_for_win ;player in eax, results in edx
 0000030B  83 FA 00					cmp		edx, 0
 0000030E  75 0E					jne		return_horizontal_success ; assume the winner is the current player, as wincheck would have caught the other case
							
							;======================

 00000310  43						inc		ebx
 00000311  41						inc		ecx
							
 00000312  E2 EB					loop col_loop_top
							
 00000314  59					pop 	ecx
 00000315  E2 E0				loop	row_loop_top
					
					;no win case
 00000317  BB 00000000			mov		ebx, 0
 0000031C  EB 05			jmp		return_horizontal
						
 0000031E				return_horizontal_success:
 0000031E  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 00000321  EB 00				jmp		return_horizontal
						
 00000323				return_horizontal:
 00000323  5D				pop		ebp
					ret
 00000324  58		   *	    pop    eax
 00000325  5B		   *	    pop    ebx
 00000326  59		   *	    pop    ecx
 00000327  5E		   *	    pop    esi
 00000328  C3		   *	    ret    00000h

 00000329			check_horizontal ENDP

				;===============================================
 00000329			load_horizontal PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the horizontal segment starting at ebx, edx into check_array.
				;===============================================

 00000329  53		   *	    push   ebx
 0000032A  51		   *	    push   ecx
 0000032B  52		   *	    push   edx
 0000032C  56		   *	    push   esi
 0000032D  50		   *	    push   eax
 0000032E  55				push	ebp
 0000032F  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 00000331  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 00000333  B9 00000004			mov		ecx, 4
					
 00000338				horizontal_load_loop_top:
						
 00000338  49					dec		ecx
 00000339  52					push	edx
						;3,2,1,0
						
 0000033A  03 D1				add		edx, ecx ; add 0,1,2,3 to column number
						
 0000033C  66| 89 1D				mov		get_row, bx
	   00000000 R
 00000343  66| 89 15				mov		get_col, dx
	   00000002 R
						
 0000034A  E8 000001B5				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 0000034F  56		     1		push	esi
 00000350  50		     1		push	eax
 00000351  8B C0	     1		mov		eax, eax
 00000353  BE 0000016F R     1		mov		esi, OFFSET check_array
 00000358  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 0000035C  58		     1		pop		eax
 0000035D  5E		     1		pop		esi
						
						
 0000035E  5A					pop		edx
 0000035F  41					inc		ecx
 00000360  E2 D6				loop horizontal_load_loop_top
						

 00000362  5D				pop		ebp
					ret
 00000363  58		   *	    pop    eax
 00000364  5E		   *	    pop    esi
 00000365  5A		   *	    pop    edx
 00000366  59		   *	    pop    ecx
 00000367  5B		   *	    pop    ebx
 00000368  C3		   *	    ret    00000h

 00000369			load_horizontal ENDP

					;===============================
					;        V E R T I C A L
					;===============================

				;===============================================
 00000369			check_vertical PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================
					
 00000369  56		   *	    push   esi
 0000036A  51		   *	    push   ecx
 0000036B  53		   *	    push   ebx
 0000036C  50		   *	    push   eax
 0000036D  55				push	ebp
 0000036E  8B EC			mov		ebp, esp
 00000370  0F B7 05			movzx	eax, player_number
	   00000004 R

 00000377  B9 00000004			mov		ecx, 4 ;rows to visit
 0000037C				row_loop_top:
					
 0000037C  51					push	ecx
 0000037D  8B D9				mov		ebx, ecx
 0000037F  B9 00000007				mov		ecx, 7
						
 00000384					col_loop_top:
						
 00000384  4B						dec		ebx
 00000385  49						dec		ecx

							;======================
							; mwritecharpipe
							; mwritedecfrom ebx
							; mwritedecfrom ecx
							
 00000386  E8 00000023					call	load_vertical
 0000038B  E8 000001A4					call	check_for_win ;player in eax, results in edx
 00000390  83 FA 00					cmp		edx, 0
 00000393  75 0E					jne		return_vertical_success ; assume the winner is the current player, as wincheck would have caught the other case
							;======================

 00000395  43						inc		ebx
 00000396  41						inc		ecx
							
 00000397  E2 EB					loop col_loop_top
							
 00000399  59					pop 	ecx
 0000039A  E2 E0				loop	row_loop_top
					
					;no win case found. 
 0000039C  BB 00000000			mov		ebx, 0
 000003A1  EB 05			jmp		return_vertical
						
 000003A3				return_vertical_success:
 000003A3  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 000003A6  EB 00				jmp		return_vertical
						
 000003A8				return_vertical:

 000003A8  5D				pop		ebp
					ret
 000003A9  58		   *	    pop    eax
 000003AA  5B		   *	    pop    ebx
 000003AB  59		   *	    pop    ecx
 000003AC  5E		   *	    pop    esi
 000003AD  C3		   *	    ret    00000h

 000003AE			check_vertical ENDP

				;===============================================
 000003AE			load_vertical PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the horizontal segment starting at ebx, edx into check_array.
				;===============================================

 000003AE  53		   *	    push   ebx
 000003AF  51		   *	    push   ecx
 000003B0  52		   *	    push   edx
 000003B1  56		   *	    push   esi
 000003B2  50		   *	    push   eax
 000003B3  55				push	ebp
 000003B4  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 000003B6  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 000003B8  B9 00000004			mov		ecx, 4
					
 000003BD				vertical_load_loop_top:
						
 000003BD  49					dec		ecx
 000003BE  53					push	ebx ; store the row number to mem
						;3,2,1,0
						
 000003BF  03 D9				add		ebx, ecx ; add 0,1,2,3 to row number
						
 000003C1  66| 89 1D				mov		get_row, bx
	   00000000 R
 000003C8  66| 89 15				mov		get_col, dx
	   00000002 R
						
 000003CF  E8 00000130				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 000003D4  56		     1		push	esi
 000003D5  50		     1		push	eax
 000003D6  8B C0	     1		mov		eax, eax
 000003D8  BE 0000016F R     1		mov		esi, OFFSET check_array
 000003DD  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 000003E1  58		     1		pop		eax
 000003E2  5E		     1		pop		esi
						
						
 000003E3  5B					pop		ebx
 000003E4  41					inc		ecx
 000003E5  E2 D6				loop vertical_load_loop_top
						

 000003E7  5D				pop		ebp
					ret
 000003E8  58		   *	    pop    eax
 000003E9  5E		   *	    pop    esi
 000003EA  5A		   *	    pop    edx
 000003EB  59		   *	    pop    ecx
 000003EC  5B		   *	    pop    ebx
 000003ED  C3		   *	    ret    00000h

 000003EE			load_vertical ENDP

					;===============================
					;         D I A G - U P
					;===============================
					
				;===============================================
 000003EE			check_diagonal_up PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================
					
					;needs to generate (3,0) -> (6,3) = (0+3, 0) -> (3+3, 3)

 000003EE  56		   *	    push   esi
 000003EF  51		   *	    push   ecx
 000003F0  53		   *	    push   ebx
 000003F1  50		   *	    push   eax
 000003F2  55				push	ebp
 000003F3  8B EC			mov		ebp, esp
 000003F5  0F B7 05			movzx	eax, player_number
	   00000004 R
					
 000003FC  B9 00000004			mov		ecx, 4 ;rows to visit
 00000401				row_loop_top:
					
 00000401  51					push	ecx
 00000402  8B D9				mov		ebx, ecx
 00000404  B9 00000004				mov		ecx, 4
						
 00000409					col_loop_top:
					
 00000409  83 C3 02					add		ebx, 2 ;row -1 +3 = +2
 0000040C  49						dec		ecx ;col

							;======================
							; mwritecharpipe
							; mwritedecfrom ebx
							; mwritedecfrom ecx
							
 0000040D  E8 00000025					call	load_diagonal_up
 00000412  E8 0000011D					call	check_for_win ;player in eax, results in edx
 00000417  83 FA 00					cmp		edx, 0
 0000041A  75 10					jne		return_diagonal_up_success ; assume the winner is the current player, as wincheck would have caught the other case
										
							;======================

 0000041C  83 EB 02					sub		ebx, 2
 0000041F  41						inc		ecx
							
 00000420  E2 E7					loop col_loop_top
							
 00000422  59					pop 	ecx
 00000423  E2 DC				loop	row_loop_top
					
					;no win case found. 
 00000425  BA 00000000			mov		edx, 0
 0000042A  EB 05			jmp		return_diagonal_up
						
 0000042C				return_diagonal_up_success:
 0000042C  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 0000042F  EB 00				jmp		return_diagonal_up
						
 00000431				return_diagonal_up:

 00000431  5D				pop		ebp
					ret
 00000432  58		   *	    pop    eax
 00000433  5B		   *	    pop    ebx
 00000434  59		   *	    pop    ecx
 00000435  5E		   *	    pop    esi
 00000436  C3		   *	    ret    00000h

 00000437			check_diagonal_up ENDP

				;===============================================
 00000437			load_diagonal_up PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the horizontal segment starting at ebx, edx into check_array.
				;===============================================

 00000437  53		   *	    push   ebx
 00000438  51		   *	    push   ecx
 00000439  52		   *	    push   edx
 0000043A  56		   *	    push   esi
 0000043B  50		   *	    push   eax
 0000043C  55				push	ebp
 0000043D  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 0000043F  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 00000441  B9 00000004			mov		ecx, 4
					
 00000446				diagonal_up_load_loop_top:
						
 00000446  49					dec		ecx
 00000447  53					push	ebx ; store the row number to mem
 00000448  52					push	edx
						;ECX == 3,2,1,0
						
 00000449  2B D9				sub		ebx, ecx ; add 0,1,2,3 to row number (3,0) -> (0,0)
 0000044B  03 D1				add		edx, ecx ; add 0,1,2,3 to col number (0,0) -> (0,3)
						
 0000044D  66| 89 1D				mov		get_row, bx
	   00000000 R
 00000454  66| 89 15				mov		get_col, dx
	   00000002 R
						
 0000045B  E8 000000A4				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 00000460  56		     1		push	esi
 00000461  50		     1		push	eax
 00000462  8B C0	     1		mov		eax, eax
 00000464  BE 0000016F R     1		mov		esi, OFFSET check_array
 00000469  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 0000046D  58		     1		pop		eax
 0000046E  5E		     1		pop		esi
						
 0000046F  5A					pop		edx
 00000470  5B					pop		ebx
 00000471  41					inc		ecx
 00000472  E2 D2				loop diagonal_up_load_loop_top
						

 00000474  5D				pop		ebp
					ret
 00000475  58		   *	    pop    eax
 00000476  5E		   *	    pop    esi
 00000477  5A		   *	    pop    edx
 00000478  59		   *	    pop    ecx
 00000479  5B		   *	    pop    ebx
 0000047A  C3		   *	    ret    00000h

 0000047B			load_diagonal_up ENDP

					;===============================
					;      D I A G - D O W N
					;===============================

				;===============================================
 0000047B			check_diagonal_down PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================
					
					;(0,0) -> (3,3)

 0000047B  56		   *	    push   esi
 0000047C  51		   *	    push   ecx
 0000047D  53		   *	    push   ebx
 0000047E  50		   *	    push   eax
 0000047F  55				push	ebp
 00000480  8B EC			mov		ebp, esp
 00000482  0F B7 05			movzx	eax, player_number
	   00000004 R
					
 00000489  B9 00000004			mov		ecx, 4 ;rows to visit
 0000048E				row_loop_top:
					
 0000048E  51					push	ecx
 0000048F  8B D9				mov		ebx, ecx
 00000491  B9 00000004				mov		ecx, 4
						
 00000496					col_loop_top:
						
 00000496  4B						dec		ebx
 00000497  49						dec		ecx

							;======================

							; mwritecharpipe
							; mwritedecfrom ebx
							; mwritedecfrom ecx
							
 00000498  E8 00000023					call	load_diagonal_down
 0000049D  E8 00000092					call	check_for_win ;player in eax, results in edx
 000004A2  83 FA 00					cmp		edx, 0
 000004A5  75 0E					jne		return_diagonal_down_success ; assume the winner is the current player, as wincheck would have caught the other case
							
							;======================

 000004A7  43						inc		ebx
 000004A8  41						inc		ecx
							
 000004A9  E2 EB					loop col_loop_top
							
 000004AB  59					pop 	ecx
 000004AC  E2 E0				loop	row_loop_top
					
					;no win case found. 
 000004AE  BA 00000000			mov		edx, 0
 000004B3  EB 05			jmp		return_diagonal_down
						
 000004B5				return_diagonal_down_success:
 000004B5  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 000004B8  EB 00				jmp		return_diagonal_down
						
 000004BA				return_diagonal_down:
					
 000004BA  5D				pop		ebp
					ret
 000004BB  58		   *	    pop    eax
 000004BC  5B		   *	    pop    ebx
 000004BD  59		   *	    pop    ecx
 000004BE  5E		   *	    pop    esi
 000004BF  C3		   *	    ret    00000h

 000004C0			check_diagonal_down ENDP

				;===============================================
 000004C0			load_diagonal_down PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the horizontal segment starting at ebx, edx into check_array.
				;===============================================

 000004C0  53		   *	    push   ebx
 000004C1  51		   *	    push   ecx
 000004C2  52		   *	    push   edx
 000004C3  56		   *	    push   esi
 000004C4  50		   *	    push   eax
 000004C5  55				push	ebp
 000004C6  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 000004C8  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 000004CA  B9 00000004			mov		ecx, 4
					
 000004CF				diagonal_down_load_loop_top:
						
 000004CF  49					dec		ecx
 000004D0  53					push	ebx ; store the row number to mem
 000004D1  52					push	edx
						;ECX == 3,2,1,0
						
 000004D2  03 D9				add		ebx, ecx ; add 0,1,2,3 to row number (0,0) -> (3,0)
 000004D4  03 D1				add		edx, ecx ; add 0,1,2,3 to col number (6,0) -> (6,3)
						
 000004D6  66| 89 1D				mov		get_row, bx
	   00000000 R
 000004DD  66| 89 15				mov		get_col, dx
	   00000002 R
						
 000004E4  E8 0000001B				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 000004E9  56		     1		push	esi
 000004EA  50		     1		push	eax
 000004EB  8B C0	     1		mov		eax, eax
 000004ED  BE 0000016F R     1		mov		esi, OFFSET check_array
 000004F2  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 000004F6  58		     1		pop		eax
 000004F7  5E		     1		pop		esi
						
 000004F8  5A					pop		edx
 000004F9  5B					pop		ebx
 000004FA  41					inc		ecx
 000004FB  E2 D2				loop diagonal_down_load_loop_top
						

 000004FD  5D				pop		ebp
					ret
 000004FE  58		   *	    pop    eax
 000004FF  5E		   *	    pop    esi
 00000500  5A		   *	    pop    edx
 00000501  59		   *	    pop    ecx
 00000502  5B		   *	    pop    ebx
 00000503  C3		   *	    ret    00000h

 00000504			load_diagonal_down ENDP

				;===============================================
 00000504			get_value_at PROC uses esi ebx ecx
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:returns value in eax. Use variables to access
				;===============================================

 00000504  56		   *	    push   esi
 00000505  53		   *	    push   ebx
 00000506  51		   *	    push   ecx
 00000507  55				push	ebp
 00000508  8B EC			mov		ebp, esp

 0000050A  BE 0000010D R		mov		esi, OFFSET connect4_grid
 0000050F  0F B7 1D			movzx	ebx, get_row ; ROW
	   00000000 R
 00000516  0F B7 0D			movzx	ecx, get_col ; COL
	   00000002 R
					
					;[esi + ((get_row * 7) + get_col)*2
					
 0000051D  6B DB 0E			imul	ebx, 14
 00000520  6B C9 02			imul 	ecx, 2
					
 00000523  03 D9			add		ebx, ecx ; STO in ebx
 00000525  03 F3			add		esi, ebx
					
 00000527  B8 00000000			mov		eax, 0
 0000052C  66| 8B 06			mov		ax, [esi]

 0000052F  5D				pop		ebp
					ret
 00000530  59		   *	    pop    ecx
 00000531  5B		   *	    pop    ebx
 00000532  5E		   *	    pop    esi
 00000533  C3		   *	    ret    00000h

 00000534			get_value_at ENDP

				;===============================================
 00000534			check_for_win PROC USES esi ecx ebx
				;
				;Pre-Conditions:player in eax, result in edx
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 00000534  56		   *	    push   esi
 00000535  51		   *	    push   ecx
 00000536  53		   *	    push   ebx
 00000537  55				push	ebp
 00000538  8B EC			mov		ebp, esp

 0000053A  B9 00000004			mov		ecx, 4
					
 0000053F				check_loop_top:
						
 0000053F  BE 0000016F R			mov		esi, OFFSET check_array
 00000544  49					dec		ecx
 00000545  8B D9				mov		ebx, ecx
 00000547  6B DB 02				imul	ebx, 2
 0000054A  03 F3				add		esi, ebx

 0000054C  66| 39 06				cmp		[esi],ax ; check against the player number
 0000054F  75 07				jne		failed
						
 00000551  41					inc		ecx
 00000552  E2 EB				loop check_loop_top
						
 00000554  8B D0			mov		edx, eax ;set return value to be the player number
 00000556  EB 07			jmp		check_proc_end
					
 00000558				failed:
					
 00000558  BA 00000000				mov		edx, 0
 0000055D  EB 00				jmp		check_proc_end
					
 0000055F				check_proc_end:
 0000055F  5D				pop		ebp
					ret
 00000560  5B		   *	    pop    ebx
 00000561  59		   *	    pop    ecx
 00000562  5E		   *	    pop    esi
 00000563  C3		   *	    ret    00000h

 00000564			check_for_win ENDP

				;===============================================
 00000564			print_grid PROC USES eax ecx edx
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 00000564  50		   *	    push   eax
 00000565  51		   *	    push   ecx
 00000566  52		   *	    push   edx
 00000567  55				push	ebp
 00000568  8B EC			mov		ebp, esp

					;call	Clrscr
					
 0000056A  B6 03			mov		dh, grid_offset_top
 0000056C  B2 10			mov		dl, grid_offset_side
					
 0000056E  BE 0000010D R		mov		esi, OFFSET connect4_grid
 00000573  B9 00000007			mov		ecx, 7
					
 00000578  E8 00000000 E		call	gotoXY
					
 0000057D  B8 00000011			mov		eax, blue + (16 * blue)
 00000582  E8 00000000 E		call	SetTextColor
					
					mwritestring g_bar
 00000587  52		     1		push 	edx
 00000588  BA 00000097 R     1		mov		edx, OFFSET g_bar
 0000058D  E8 00000000 E     1		call	WriteString
 00000592  5A		     1		pop		edx
					
 00000593				top_row:
						
 00000593  51					push	ecx
 00000594  B9 00000007				mov		ecx, 7

 00000599  FE C6				inc		dh ;move down one layer
 0000059B  E8 00000000 E			call	gotoXY
						
						mwritecharspace
 000005A0  50		     1		push 	eax
 000005A1  B0 20	     1		mov		al, ' '
 000005A3  E8 00000000 E     1		call	WriteChar
 000005A8  58		     1		pop		eax
						mwritecharpipe ; print pipe
 000005A9  50		     1		push 	eax
 000005AA  B0 7C	     1		mov		al, '|'
 000005AC  E8 00000000 E     1		call	WriteChar
 000005B1  58		     1		pop		eax
						mwritecharspace ; print space
 000005B2  50		     1		push 	eax
 000005B3  B0 20	     1		mov		al, ' '
 000005B5  E8 00000000 E     1		call	WriteChar
 000005BA  58		     1		pop		eax
					
 000005BB					top_col:
							
 000005BB  B8 00000000					mov		eax, 0
 000005C0  66| 8B 06					mov		ax, [esi]
							
							;call	WriteDec ; for no colors :(
 000005C3  E8 000000CC					call	print_value ; for colors:)
							
							mwritecharspace
 000005C8  50		     1		push 	eax
 000005C9  B0 20	     1		mov		al, ' '
 000005CB  E8 00000000 E     1		call	WriteChar
 000005D0  58		     1		pop		eax
							mwritecharpipe
 000005D1  50		     1		push 	eax
 000005D2  B0 7C	     1		mov		al, '|'
 000005D4  E8 00000000 E     1		call	WriteChar
 000005D9  58		     1		pop		eax
							mwritecharspace
 000005DA  50		     1		push 	eax
 000005DB  B0 20	     1		mov		al, ' '
 000005DD  E8 00000000 E     1		call	WriteChar
 000005E2  58		     1		pop		eax
							
 000005E3  83 C6 02					add 	esi, 2 ;next element queued up
							
 000005E6  E2 D3					loop 	top_col
								
 000005E8  59					pop		ecx
						
 000005E9  FE C6				inc		dh ;move down one layer
 000005EB  E8 00000000 E			call	gotoXY
						mwritestring g_bar ; print a bar
 000005F0  52		     1		push 	edx
 000005F1  BA 00000097 R     1		mov		edx, OFFSET g_bar
 000005F6  E8 00000000 E     1		call	WriteString
 000005FB  5A		     1		pop		edx
						
 000005FC  E2 95				loop	top_row
					
					;Printing is done.
					
 000005FE  B8 00000002			mov		eax, green
 00000603  E8 00000000 E		call	SetTextColor
					
 00000608  FE C6			inc		dh ;move down one layer
 0000060A  E8 00000000 E		call	gotoXY
					mwritestring g_numbers
 0000060F  52		     1		push 	edx
 00000610  BA 000000B7 R     1		mov		edx, OFFSET g_numbers
 00000615  E8 00000000 E     1		call	WriteString
 0000061A  5A		     1		pop		edx
					
 0000061B  80 C6 02			add		dh, 2
					
					mresettextcolor
 0000061E  50		     1		push	eax
 0000061F  B8 0000000F	     1		mov		eax, white + (black * 16)
 00000624  E8 00000000 E     1		call	SetTextColor
 00000629  58		     1		pop		eax
					
 0000062A  5D				pop		ebp
					ret
 0000062B  5A		   *	    pop    edx
 0000062C  59		   *	    pop    ecx
 0000062D  58		   *	    pop    eax
 0000062E  C3		   *	    ret    00000h

 0000062F			print_grid ENDP

				;===============================================
 0000062F			clear_line PROC USES ecx
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 0000062F  51		   *	    push   ecx
 00000630  55				push	ebp
 00000631  8B EC			mov		ebp, esp

					;mov		dh, grid_offset_top + 17
					;mov		dl, grid_offset_side
					
 00000633  B9 00000041			mov		ecx, 65
					
 00000638				spaces_print_top:
					
						mwritecharspace
 00000638  50		     1		push 	eax
 00000639  B0 20	     1		mov		al, ' '
 0000063B  E8 00000000 E     1		call	WriteChar
 00000640  58		     1		pop		eax
						
					
 00000641  E2 F5			loop 	spaces_print_top
					
 00000643  E8 00000000 E		call	GotoXY
					
 00000648  5D				pop		ebp
					ret
 00000649  59		   *	    pop    ecx
 0000064A  C3		   *	    ret    00000h

 0000064B			clear_line ENDP

				;===============================================
 0000064B			drop_to_bottom PROC USES ecx eax ebx edx esi
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires: that there is no value in the top element of that column
				;Returns:
				;Description:
				;===============================================

 0000064B  51		   *	    push   ecx
 0000064C  50		   *	    push   eax
 0000064D  53		   *	    push   ebx
 0000064E  52		   *	    push   edx
 0000064F  56		   *	    push   esi
 00000650  55				push	ebp
 00000651  8B EC			mov		ebp, esp
					
 00000653  BE 0000010D R		mov		esi, OFFSET connect4_grid
 00000658  B9 00000006			mov		ecx, 6; set the counter to loop 6 times
 0000065D  BB 00000000			mov		ebx, 0; compare to this because cannot compare to literal
					
 00000662  0F B7 05			movzx	eax, player_col ; i.e.e col 5
	   0000000C R
 00000669  6B C0 02			imul	eax, 2 ; 5 --> 10
 0000066C  03 F0			add 	esi, eax
					
 0000066E  8B C6			mov		eax, esi ; move the pointer to the first element int eax.
 00000670  83 C0 0E			add		eax, 14 ;add 14 to eax to get the next element down the column.
					
 00000673				drop_to_bottom_loop_top:
					
 00000673  66| 39 18				cmp 	[eax], bx ; check if the next value down is zero
 00000676  74 02				je		loop_again
 00000678  EB 07				jmp		fill_esi 	
						
 0000067A					loop_again:
						
 0000067A  8B F0				mov		esi, eax
 0000067C  83 C0 0E				add		eax, 14
 0000067F  E2 F2				loop	drop_to_bottom_loop_top
					
					
 00000681				fill_esi:
 00000681  0F B7 1D				movzx	ebx, player_number
	   00000004 R
 00000688  66| 89 1E				mov		[esi], bx
 0000068B  EB 00				jmp		fill_end
					
					
 0000068D				fill_end:
 0000068D  5D				pop		ebp
					ret
 0000068E  5E		   *	    pop    esi
 0000068F  5A		   *	    pop    edx
 00000690  5B		   *	    pop    ebx
 00000691  58		   *	    pop    eax
 00000692  59		   *	    pop    ecx
 00000693  C3		   *	    ret    00000h

 00000694			drop_to_bottom ENDP

				;===============================================
 00000694			print_value PROC USES eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description:
				;===============================================

 00000694  50		   *	    push   eax
 00000695  55				push	ebp
 00000696  8B EC			mov		ebp, esp
					
 00000698  8B D8			mov		ebx, eax
					
 0000069A  E8 00000000 E		call	GetTextColor
 0000069F  50				push	eax; push original color
					
 000006A0  83 FB 01			cmp		ebx,1
 000006A3  7C 04			jl		black_color
 000006A5  74 17			je		red_color
 000006A7  7F 2A			jg		yellow_color
					
 000006A9				black_color:
						
 000006A9  B8 00000000				mov		eax, black*16
 000006AE  E8 00000000 E			call	SetTextColor
						mwritecharspace
 000006B3  50		     1		push 	eax
 000006B4  B0 20	     1		mov		al, ' '
 000006B6  E8 00000000 E     1		call	WriteChar
 000006BB  58		     1		pop		eax
 000006BC  EB 2A				jmp 	print_value_end
						
 000006BE				red_color:
						
 000006BE  B8 00000040				mov		eax, red*16
 000006C3  E8 00000000 E			call	SetTextColor
						mwritecharspace
 000006C8  50		     1		push 	eax
 000006C9  B0 20	     1		mov		al, ' '
 000006CB  E8 00000000 E     1		call	WriteChar
 000006D0  58		     1		pop		eax
 000006D1  EB 15				jmp 	print_value_end
						
 000006D3				yellow_color:
						
 000006D3  B8 000000E0				mov		eax, yellow*16
 000006D8  E8 00000000 E			call	SetTextColor
						mwritecharspace
 000006DD  50		     1		push 	eax
 000006DE  B0 20	     1		mov		al, ' '
 000006E0  E8 00000000 E     1		call	WriteChar
 000006E5  58		     1		pop		eax
 000006E6  EB 00				jmp 	print_value_end
					
 000006E8				print_value_end:
					
 000006E8  58				pop		eax
 000006E9  E8 00000000 E		call	SetTextColor
					
 000006EE  5D				pop		ebp
					ret
 000006EF  58		   *	    pop    eax
 000006F0  C3		   *	    ret    00000h

 000006F1			print_value ENDP

				END main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/17/19 14:20:37
CONNECT FOUR     (connect4.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

mclearandgotoline  . . . . . . .	Proc
mclearhome . . . . . . . . . . .	Proc
mresettextcolor  . . . . . . . .	Proc
msetval  . . . . . . . . . . . .	Proc
mwincheck  . . . . . . . . . . .	Proc
mwritecharpipe . . . . . . . . .	Proc
mwritecharspace  . . . . . . . .	Proc
mwritedecfrom  . . . . . . . . .	Proc
mwritestringnewline  . . . . . .	Proc
mwritestring . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_BSS . . . . . . . . . . . . . .	32 Bit	 0000000E Para	  Public  'BSS'  
_DATA  . . . . . . . . . . . . .	32 Bit	 00000177 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000006F1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
check_column_playable  . . . . .	P Near	 00000275 _TEXT	Length= 00000028 Public STDCALL
  col_is_free  . . . . . . . . .	L Near	 0000028B _TEXT	
  col_is_full  . . . . . . . . .	L Near	 00000292 _TEXT	
  return_to_parent . . . . . . .	L Near	 00000299 _TEXT	
check_diagonal_down  . . . . . .	P Near	 0000047B _TEXT	Length= 00000045 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 0000048E _TEXT	
  col_loop_top . . . . . . . . .	L Near	 00000496 _TEXT	
  return_diagonal_down_success .	L Near	 000004B5 _TEXT	
  return_diagonal_down . . . . .	L Near	 000004BA _TEXT	
check_diagonal_up  . . . . . . .	P Near	 000003EE _TEXT	Length= 00000049 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 00000401 _TEXT	
  col_loop_top . . . . . . . . .	L Near	 00000409 _TEXT	
  return_diagonal_up_success . .	L Near	 0000042C _TEXT	
  return_diagonal_up . . . . . .	L Near	 00000431 _TEXT	
check_for_win  . . . . . . . . .	P Near	 00000534 _TEXT	Length= 00000030 Public STDCALL
  check_loop_top . . . . . . . .	L Near	 0000053F _TEXT	
  failed . . . . . . . . . . . .	L Near	 00000558 _TEXT	
  check_proc_end . . . . . . . .	L Near	 0000055F _TEXT	
check_horizontal . . . . . . . .	P Near	 000002E4 _TEXT	Length= 00000045 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 000002F7 _TEXT	
  col_loop_top . . . . . . . . .	L Near	 000002FF _TEXT	
  return_horizontal_success  . .	L Near	 0000031E _TEXT	
  return_horizontal  . . . . . .	L Near	 00000323 _TEXT	
check_vertical . . . . . . . . .	P Near	 00000369 _TEXT	Length= 00000045 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 0000037C _TEXT	
  col_loop_top . . . . . . . . .	L Near	 00000384 _TEXT	
  return_vertical_success  . . .	L Near	 000003A3 _TEXT	
  return_vertical  . . . . . . .	L Near	 000003A8 _TEXT	
clear_line . . . . . . . . . . .	P Near	 0000062F _TEXT	Length= 0000001C Public STDCALL
  spaces_print_top . . . . . . .	L Near	 00000638 _TEXT	
computer_input_validation  . . .	P Near	 00000201 _TEXT	Length= 00000027 Public STDCALL
  col_check_top  . . . . . . . .	L Near	 00000207 _TEXT	
  fill_and_quit  . . . . . . . .	L Near	 0000021D _TEXT	
drop_to_bottom . . . . . . . . .	P Near	 0000064B _TEXT	Length= 00000049 Public STDCALL
  drop_to_bottom_loop_top  . . .	L Near	 00000673 _TEXT	
  loop_again . . . . . . . . . .	L Near	 0000067A _TEXT	
  fill_esi . . . . . . . . . . .	L Near	 00000681 _TEXT	
  fill_end . . . . . . . . . . .	L Near	 0000068D _TEXT	
get_input_on_range . . . . . . .	P Near	 0000029D _TEXT	Length= 00000047 Public STDCALL
  value_entry_top  . . . . . . .	L Near	 000002A0 _TEXT	
  error_message  . . . . . . . .	L Near	 000002AF _TEXT	
  print_normal . . . . . . . . .	L Near	 000002B6 _TEXT	
  print_on_line  . . . . . . . .	L Near	 000002C4 _TEXT	
  value_ok . . . . . . . . . . .	L Near	 000002E2 _TEXT	
get_value_at . . . . . . . . . .	P Near	 00000504 _TEXT	Length= 00000030 Public STDCALL
load_diagonal_down . . . . . . .	P Near	 000004C0 _TEXT	Length= 00000044 Public STDCALL
  diagonal_down_load_loop_top  .	L Near	 000004CF _TEXT	
load_diagonal_up . . . . . . . .	P Near	 00000437 _TEXT	Length= 00000044 Public STDCALL
  diagonal_up_load_loop_top  . .	L Near	 00000446 _TEXT	
load_horizontal  . . . . . . . .	P Near	 00000329 _TEXT	Length= 00000040 Public STDCALL
  horizontal_load_loop_top . . .	L Near	 00000338 _TEXT	
load_vertical  . . . . . . . . .	P Near	 000003AE _TEXT	Length= 00000040 Public STDCALL
  vertical_load_loop_top . . . .	L Near	 000003BD _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000201 Public STDCALL
  top_main . . . . . . . . . . .	L Near	 00000000 _TEXT	
  computer_switch_no_change  . .	L Near	 0000004D _TEXT	
  loop_main_top  . . . . . . . .	L Near	 00000077 _TEXT	
  top_turn . . . . . . . . . . .	L Near	 00000084 _TEXT	
  computer_turn  . . . . . . . .	L Near	 000000AD _TEXT	
  player_turn  . . . . . . . . .	L Near	 000000B4 _TEXT	
  win_check_label  . . . . . . .	L Near	 000000EE _TEXT	
  add_one  . . . . . . . . . . .	L Near	 00000127 _TEXT	
  swap_done  . . . . . . . . . .	L Near	 00000128 _TEXT	
  win_for_current_player . . . .	L Near	 0000013A _TEXT	
  cat_game . . . . . . . . . . .	L Near	 00000181 _TEXT	
  play_again . . . . . . . . . .	L Near	 000001AB _TEXT	
  hard_stop  . . . . . . . . . .	L Near	 000001FA _TEXT	
player_input_validation  . . . .	P Near	 00000228 _TEXT	Length= 0000004D Public STDCALL
  col_check_top  . . . . . . . .	L Near	 0000022E _TEXT	
  retry_with_error . . . . . . .	L Near	 0000024C _TEXT	
  fill_and_quit  . . . . . . . .	L Near	 0000026A _TEXT	
print_grid . . . . . . . . . . .	P Near	 00000564 _TEXT	Length= 000000CB Public STDCALL
  top_row  . . . . . . . . . . .	L Near	 00000593 _TEXT	
  top_col  . . . . . . . . . . .	L Near	 000005BB _TEXT	
print_value  . . . . . . . . . .	P Near	 00000694 _TEXT	Length= 0000005D Public STDCALL
  black_color  . . . . . . . . .	L Near	 000006A9 _TEXT	
  red_color  . . . . . . . . . .	L Near	 000006BE _TEXT	
  yellow_color . . . . . . . . .	L Near	 000006D3 _TEXT	
  print_value_end  . . . . . . .	L Near	 000006E8 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DBG_1  . . . . . . . . . . . . .	Byte	 000000D4 _DATA	
DBG_2  . . . . . . . . . . . . .	Byte	 000000E0 _DATA	
DBG_3  . . . . . . . . . . . . .	Byte	 000000EA _DATA	
DBG_4  . . . . . . . . . . . . .	Byte	 000000F7 _DATA	
DBG_5  . . . . . . . . . . . . .	Byte	 00000106 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cat_game_printout  . . . . . . .	Byte	 0000001C _DATA	
check_array  . . . . . . . . . .	Word	 0000016F _DATA	
cols . . . . . . . . . . . . . .	Number	 00000007h   
computer_switch  . . . . . . . .	Word	 00000008 _BSS	
connect4_grid  . . . . . . . . .	Word	 0000010D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
g_bar  . . . . . . . . . . . . .	Byte	 00000097 _DATA	
g_numbers  . . . . . . . . . . .	Byte	 000000B7 _DATA	
get_col  . . . . . . . . . . . .	Word	 00000002 _BSS	
get_row  . . . . . . . . . . . .	Word	 00000000 _BSS	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
grid_offset_side . . . . . . . .	Number	 00000010h   
grid_offset_top  . . . . . . . .	Number	 00000003h   
invalid_entry  . . . . . . . . .	Byte	 00000058 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
play_again_prompt  . . . . . . .	Byte	 0000003B _DATA	
player_1 . . . . . . . . . . . .	Byte	 00000050 _DATA	
player_col_entry_2 . . . . . . .	Byte	 0000006C _DATA	
player_col . . . . . . . . . . .	Word	 0000000C _BSS	
player_count_prompt  . . . . . .	Byte	 0000000A _DATA	
player_number  . . . . . . . . .	Word	 00000004 _BSS	
player_win_2 . . . . . . . . . .	Byte	 0000008F _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rows . . . . . . . . . . . . . .	Number	 00000007h   
turns_played_total . . . . . . .	Word	 00000006 _BSS	
turns_to_cat . . . . . . . . . .	Number	 00000032h   
welcome_message  . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winning_player . . . . . . . . .	Word	 0000000A _BSS	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
