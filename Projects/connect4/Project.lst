Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/17/19 14:46:37
CONNECT FOUR     (connect4.asm				     Page 1 - 1


				TITLE CONNECT FOUR     (connect4.asm)

				; Author: Lyell Read
				; Course / Project ID: CS271/connect4           Timeframe: 1/22/2019 - 3/17/2019
				; Description: Play the game connect 4 with a 7*7 grid. Either 2p or p vs cpu. Text based. Yeah. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				.stack 4096


					;===============================
					;SET UP MACROS USED THROUGHOUT
					;===============================

				mwritestring MACRO string
					push 	edx
					mov		edx, OFFSET string
					call	WriteString
					pop		edx
				ENDM

				mwritestringnewline MACRO string
					push 	edx
					mov		edx, OFFSET string
					call	WriteString
					call	CrLF
					pop		edx
				ENDM

				mwritecharpipe MACRO string
					push 	eax
					mov		al, '|'
					call	WriteChar
					pop		eax
				ENDM

				mwritecharspace MACRO string
					push 	eax
					mov		al, ' '
					call	WriteChar
					pop		eax
				ENDM

				mwincheck MACRO
					call	check_horizontal
					add		eax, edx
					call	check_vertical
					add		eax, edx
					call	check_diagonal_down
					add		eax, edx
					call	check_diagonal_up
					add		eax, edx
				ENDM
					
				msetval MACRO value, element, array_name
					push	esi
					push	eax
					mov		eax, value
					mov		esi, OFFSET array_name
					mov		[esi + (element * 2)], ax
					pop		eax
					pop		esi
				ENDM

				mwritedecfrom MACRO reg
					push 	eax
					mov		eax, reg
					call	WriteDec
					pop		eax
				ENDM

				mresettextcolor MACRO
					push	eax
					
					mov		eax, white + (black * 16)
					call	SetTextColor
					
					pop		eax
				ENDM

				mclearhome MACRO
					push 	edx
					push	eax
					
					call	Clrscr

					mov		edx, 0
					call	GotoXY
					
					mresettextcolor
					
					pop		eax
					pop		edx
				ENDM

				mclearandgotoline MACRO
					push	edx
					
					mov		dh, grid_offset_top + 17;total offset from top where this line is.
					mov		dl, grid_offset_side 
					
					call 	gotoXY
					call	clear_line
					
					pop		edx
				ENDM

					;===============================
					;          CONSTANTS
					;===============================
					
 = 00000007			rows				EQU		7
 = 00000007			cols				EQU		7
 = 00000032			turns_to_cat		EQU		50 ;rows * cols + 1; maybe there's a neater way?
 = 00000010			grid_offset_side	EQU		16 ;the space in characters between the terminal left edge and the printout of the grid.
 = 00000003			grid_offset_top		EQU		3 ;the space in characters between the top of the terminal and the top edge of the grid


					;===============================
					;         DATA SEGMENT
					;===============================

 00000000			.data
					
				;Text Segments
 00000000 57 65 6C 63 6F	welcome_message				BYTE	"Welcome. ",0
	   6D 65 2E 20 00
 0000000A 50 6C 61 79 65	player_count_prompt			BYTE	"Players (1 or 2):",0
	   72 73 20 28 31
	   20 6F 72 20 32
	   29 3A 00
 0000001C 59 6F 75 20 64	cat_game_printout			BYTE	"You done did a cat game boi.  ",0
	   6F 6E 65 20 64
	   69 64 20 61 20
	   63 61 74 20 67
	   61 6D 65 20 62
	   6F 69 2E 20 20
	   00
 0000003B 50 6C 61 79 20	play_again_prompt			BYTE	"Play Again (1 or 0):",0
	   41 67 61 69 6E
	   20 28 31 20 6F
	   72 20 30 29 3A
	   00
 00000050 50 6C 61 79 65	player_1					BYTE	"Player ",0
	   72 20 00
 00000058 49 6E 76 61 6C	invalid_entry				BYTE	"Invalid. Re- Enter:",0
	   69 64 2E 20 52
	   65 2D 20 45 6E
	   74 65 72 3A 00
 0000006C 2C 20 70 6C 65	player_col_entry_2			BYTE	", please your column choice:",0	
	   61 73 65 20 79
	   6F 75 72 20 63
	   6F 6C 75 6D 6E
	   20 63 68 6F 69
	   63 65 3A 00
 00000089 20 57 4F 4E 2E	player_win_2				BYTE	" WON.  ",0
	   20 20 00

 00000091 20 2B 2D 2D 2D	g_bar						BYTE	" +---+---+---+---+---+---+---+ ",0
	   2B 2D 2D 2D 2B
	   2D 2D 2D 2B 2D
	   2D 2D 2B 2D 2D
	   2D 2B 2D 2D 2D
	   2B 2D 2D 2D 2B
	   20 00
 000000B1 20 20 20 30 20	g_numbers					BYTE	"   0   1   2   3   4   5   6",0
	   20 20 31 20 20
	   20 32 20 20 20
	   33 20 20 20 34
	   20 20 20 35 20
	   20 20 36 00

				;Array Defenition
 000000CE  00000031 [		connect4_grid				WORD	49 DUP (0)								
	    0000
	   ]
 00000130  00000004 [		check_array					WORD	4 DUP(0)
	    0000
	   ]

 00000000			.data?
				;Variable Defenitions
 00000000 0000			get_row						WORD	?	;(0..6) will be used to store the row of a get call	
 00000002 0000			get_col						WORD	?	;(0..6) will be used to store the col of a get call
 00000004 0000			player_number				WORD	?	;(1|2) Measures who has just played
 00000006 0000			turns_played_total			WORD	?	;will increment with each turn, checking against turns_to_cat
 00000008 0000			computer_switch				WORD	?	;(0|1) Measures weather the player wants 2p or 1p respectively
 0000000A 0000			winning_player				WORD	?	;(1|2) set by win_check alg.
 0000000C 0000			player_col					WORD	?	;(0..6) Choice of where to play.


					;===============================
					;         CODE SEGMENT
					;===============================

 00000000			.code
 00000000			main PROC
					
 00000000				top_main:

					;===================================
					;SET UP ALL VALUES TO RESET THE GAME
					;===================================

					mwritestringnewline welcome_message ; welcome message
 00000000  52		     1		push 	edx
 00000001  BA 00000000 R     1		mov		edx, OFFSET welcome_message
 00000006  E8 00000000 E     1		call	WriteString
 0000000B  E8 00000000 E     1		call	CrLF
 00000010  5A		     1		pop		edx
					mwritestring player_count_prompt ; Ask the user how many players they want (SET COMPUTER SWITCH)
 00000011  52		     1		push 	edx
 00000012  BA 0000000A R     1		mov		edx, OFFSET player_count_prompt
 00000017  E8 00000000 E     1		call	WriteString
 0000001C  5A		     1		pop		edx
					
					;get & check input
 0000001D  BA 00000001			mov		edx, 1
 00000022  BB 00000002			mov		ebx, 2
 00000027  B9 00000000			mov		ecx, 0 ; set flag
 0000002C  E8 00000271			call	get_input_on_range
					
 00000031  E8 00000000 E		call	CrLF
 00000036  66| C7 05			mov		computer_switch, 0
	   00000008 R
	   0000
 0000003F  83 F8 02			cmp		eax, 2 ;if the user has chosen two player, jump to bottom
 00000042  74 09			je		computer_switch_no_change

 00000044  66| C7 05			mov		computer_switch, 1
	   00000008 R
	   0001
 0000004D			computer_switch_no_change:
 0000004D  66| C7 05			mov		player_number, 1;set the current player to 1 as p1 will start regardless of player mode...
	   00000004 R
	   0001
 00000056  66| C7 05			mov		turns_played_total, 1;set the total turns played to 1 as we are resetting the game
	   00000006 R
	   0001
 0000005F  66| C7 05			mov		winning_player, 0;set the winner to 0
	   0000000A R
	   0000
					
					;Zero the grid out (in case of play again)
 00000068  B9 00000031			mov		ecx, 49
 0000006D  B8 00000000			mov		eax, 0
 00000072  BE 000000CE R		mov		esi, OFFSET connect4_grid
 00000077				loop_main_top:
 00000077  66| 89 06				mov		[esi],ax 
 0000007A  83 C6 02				add		esi, 2
 0000007D  E2 F8				loop	loop_main_top	
					
					;===================
					;LET THE GAME BEGIN!
					;===================	
					
					; call	CrLF
					; call	Waitmsg
 0000007F  E8 00000000 E		call	clrscr
					
 00000084			top_turn:

					;print that griddy boi
 00000084  E8 000004E0			call	print_grid
					
					;if turns compeleted is the same as turns possible, call it a CAT GAME!
 00000089  66| 83 3D			cmp		turns_played_total, turns_to_cat
	   00000006 R 32
 00000091  0F 84 000000EA		je		cat_game
					
					;check if the player number is 1, and if so, send to play a player turn
 00000097  66| 83 3D			cmp		player_number, 1
	   00000004 R 01
 0000009F  74 13			je		player_turn
					
					;we are either player 2 or CPU now, so check CPU flag

 000000A1  66| 83 3D			cmp		computer_switch, 1
	   00000008 R 01
 000000A9  74 02			je		computer_turn
 000000AB  EB 07			jmp		player_turn ;we are player 2.
					
						
 000000AD			computer_turn: ;NOTE: if CPU is playing, then player_num =2

					;===============================
					;        Computer Turn
					;===============================
					
					;play CPU turn lol
 000000AD  E8 0000014F			call	computer_input_validation
 000000B2  EB 3A			jmp		win_check_label
					
 000000B4			player_turn:

					;===============================
					;         Player Turn
					;===============================

					mclearandgotoline
 000000B4  52		     1		push	edx
 000000B5  B6 14	     1		mov		dh, grid_offset_top + 17;total offset from top where this line is.
 000000B7  B2 10	     1		mov		dl, grid_offset_side 
 000000B9  E8 00000000 E     1		call 	gotoXY
 000000BE  E8 00000571	     1		call	clear_line
 000000C3  5A		     1		pop		edx
					
					mwritestring player_1
 000000C4  52		     1		push 	edx
 000000C5  BA 00000050 R     1		mov		edx, OFFSET player_1
 000000CA  E8 00000000 E     1		call	WriteString
 000000CF  5A		     1		pop		edx
 000000D0  66| A1			mov		ax, player_number
	   00000004 R
 000000D6  E8 00000000 E		call	WriteDec
					mwritestring player_col_entry_2
 000000DB  52		     1		push 	edx
 000000DC  BA 0000006C R     1		mov		edx, OFFSET player_col_entry_2
 000000E1  E8 00000000 E     1		call	WriteString
 000000E6  5A		     1		pop		edx
					
 000000E7  E8 00000141			call	player_input_validation
					
 000000EC  EB 00			jmp		win_check_label
					
 000000EE			win_check_label:

 000000EE  E8 0000055D			call	drop_to_bottom

 000000F3  B8 00000000			mov		eax, 0 ;eax is used by macro to keep track of wins
					mwincheck
 000000F8  E8 000001EC	     1		call	check_horizontal
 000000FD  03 C2	     1		add		eax, edx
 000000FF  E8 0000026A	     1		call	check_vertical
 00000104  03 C2	     1		add		eax, edx
 00000106  E8 00000375	     1		call	check_diagonal_down
 0000010B  03 C2	     1		add		eax, edx
 0000010D  E8 000002E1	     1		call	check_diagonal_up
 00000112  03 C2	     1		add		eax, edx
					
 00000114  83 F8 00			cmp		eax, 0
 00000117  75 21			jne		win_for_current_player
					
					;swap player_number to initiate the next turn..
 00000119  66| A1			mov		ax, player_number
	   00000004 R
 0000011F  83 F8 01			cmp		eax, 1
 00000122  74 03			je		add_one
 00000124  48				dec		eax
 00000125  EB 01			jmp		swap_done
 00000127				add_one:
 00000127  40				inc		eax
 00000128				swap_done:
 00000128  66| A3			mov		player_number, ax
	   00000004 R
					
 0000012E  66| FF 05			inc		turns_played_total
	   00000006 R
					
					;jump back to top of turn "loop".
 00000135  E9 FFFFFF4A			jmp		top_turn
					
 0000013A			win_for_current_player:
					
 0000013A  E8 0000042A			call	print_grid
					
					mclearandgotoline
 0000013F  52		     1		push	edx
 00000140  B6 14	     1		mov		dh, grid_offset_top + 17;total offset from top where this line is.
 00000142  B2 10	     1		mov		dl, grid_offset_side 
 00000144  E8 00000000 E     1		call 	gotoXY
 00000149  E8 000004E6	     1		call	clear_line
 0000014E  5A		     1		pop		edx
					mresettextcolor
 0000014F  50		     1		push	eax
 00000150  B8 0000000F	     1		mov		eax, white + (black * 16)
 00000155  E8 00000000 E     1		call	SetTextColor
 0000015A  58		     1		pop		eax

					mwritestring player_1
 0000015B  52		     1		push 	edx
 0000015C  BA 00000050 R     1		mov		edx, OFFSET player_1
 00000161  E8 00000000 E     1		call	WriteString
 00000166  5A		     1		pop		edx
 00000167  0F B7 05			movzx	eax, player_number
	   00000004 R
 0000016E  E8 00000000 E		call	WriteDec
					mwritestring player_win_2
 00000173  52		     1		push 	edx
 00000174  BA 00000089 R     1		mov		edx, OFFSET player_win_2
 00000179  E8 00000000 E     1		call	WriteString
 0000017E  5A		     1		pop		edx
					
 0000017F  EB 2A			jmp play_again

 00000181			cat_game:
					
					
					mclearandgotoline
 00000181  52		     1		push	edx
 00000182  B6 14	     1		mov		dh, grid_offset_top + 17;total offset from top where this line is.
 00000184  B2 10	     1		mov		dl, grid_offset_side 
 00000186  E8 00000000 E     1		call 	gotoXY
 0000018B  E8 000004A4	     1		call	clear_line
 00000190  5A		     1		pop		edx
					mresettextcolor
 00000191  50		     1		push	eax
 00000192  B8 0000000F	     1		mov		eax, white + (black * 16)
 00000197  E8 00000000 E     1		call	SetTextColor
 0000019C  58		     1		pop		eax
					mwritestring cat_game_printout
 0000019D  52		     1		push 	edx
 0000019E  BA 0000001C R     1		mov		edx, OFFSET cat_game_printout
 000001A3  E8 00000000 E     1		call	WriteString
 000001A8  5A		     1		pop		edx

 000001A9  EB 00			jmp		play_again
					
					
 000001AB			play_again:

 000001AB  E8 00000000 E		call	Waitmsg
					
					mclearhome
 000001B0  52		     1		push 	edx
 000001B1  50		     1		push	eax
 000001B2  E8 00000000 E     1		call	Clrscr
 000001B7  BA 00000000	     1		mov		edx, 0
 000001BC  E8 00000000 E     1		call	GotoXY
 000001C1  50		     2		push	eax
 000001C2  B8 0000000F	     2		mov		eax, white + (black * 16)
 000001C7  E8 00000000 E     2		call	SetTextColor
 000001CC  58		     2		pop		eax
 000001CD  58		     1		pop		eax
 000001CE  5A		     1		pop		edx
					;print play again message
					mwritestring play_again_prompt
 000001CF  52		     1		push 	edx
 000001D0  BA 0000003B R     1		mov		edx, OFFSET play_again_prompt
 000001D5  E8 00000000 E     1		call	WriteString
 000001DA  5A		     1		pop		edx

					;get & check input
 000001DB  BA 00000000			mov		edx, 0
 000001E0  BB 00000001			mov		ebx, 1
 000001E5  B9 00000000			mov		ecx, 0 ; set flag to not print to line
 000001EA  E8 000000B3			call	get_input_on_range
					
 000001EF  83 F8 01			cmp		eax, 1
 000001F2  0F 84 FFFFFE08		je		top_main
 000001F8  EB 00			jmp		hard_stop
					
 000001FA			hard_stop:
					
					exit	; exit to operating system
 000001FA  6A 00	   *	    push   +000000000h
 000001FC  E8 00000000 E   *	    call   ExitProcess
 00000201			main ENDP

				;===============================================
 00000201			computer_input_validation PROC USES eax edx ebx
				;
				;Pre-Conditions: None
				;Post-Conditions:player_col is set to the appropriate value
				;Requires:nothing
				;Returns:nothing
				;Description:generates the CPU play in an available square
				;===============================================

 00000201  50		   *	    push   eax
 00000202  52		   *	    push   edx
 00000203  53		   *	    push   ebx
 00000204  55				push	ebp
 00000205  8B EC			mov		ebp, esp
					
 00000207				col_check_top:
 00000207  BA 00000000			mov		edx, 0
 0000020C  B8 00000007			mov		eax, 7; set rand high range
 00000211  E8 00000000 E		call	RandomRange ; rand on 0..6
					
					; ==== INPUT CHECK -- COL EMPTY ====
 00000216  E8 0000005F			call	check_column_playable
					
					;check_column_playable returns in edx 1 = OK 0 = FULL
 0000021B  83 FA 01			cmp		edx, 1
 0000021E  74 02			je		fill_and_quit
 00000220  EB E5			jmp		col_check_top ; try again at generating a good random value... please ;)
						
 00000222				fill_and_quit:
						
 00000222  66| A3				mov		player_col, ax
	   0000000C R
					
 00000228  5D				pop		ebp
					ret
 00000229  5B		   *	    pop    ebx
 0000022A  5A		   *	    pop    edx
 0000022B  58		   *	    pop    eax
 0000022C  C3		   *	    ret    00000h

 0000022D			computer_input_validation ENDP

				;===============================================
 0000022D			player_input_validation PROC USES eax edx ebx
				;
				;Pre-Conditions: None
				;Post-Conditions: player value stored
				;Requires:nothing
				;Returns:nothing
				;Description:prompts the player to enter a value. makes sure that that value is OK
				;===============================================

 0000022D  50		   *	    push   eax
 0000022E  52		   *	    push   edx
 0000022F  53		   *	    push   ebx
 00000230  55				push	ebp
 00000231  8B EC			mov		ebp, esp
					
 00000233				col_check_top:
					
 00000233  B9 00000001			mov		ecx, 1 ; set flag to print on line.
 00000238  BB 00000006			mov		ebx, 6 ; set upper range for input check part 1
 0000023D  BA 00000000			mov		edx, 0 ; set lower range      "          "
					
					;call	ReadDec ; --> eax == col number
					
					; ==== INPUT CHECK -- RANGE ====
 00000242  E8 0000005B			call	get_input_on_range
					
					; ==== INPUT CHECK -- COL EMPTY ====
 00000247  E8 0000002E			call	check_column_playable
					
					;check_column_playable returns in edx 1 = OK 0 = FULL
 0000024C  83 FA 01			cmp		edx, 1
 0000024F  74 1E			je		fill_and_quit
					
 00000251				retry_with_error:
					
						mclearandgotoline
 00000251  52		     1		push	edx
 00000252  B6 14	     1		mov		dh, grid_offset_top + 17;total offset from top where this line is.
 00000254  B2 10	     1		mov		dl, grid_offset_side 
 00000256  E8 00000000 E     1		call 	gotoXY
 0000025B  E8 000003D4	     1		call	clear_line
 00000260  5A		     1		pop		edx
						mwritestring invalid_entry
 00000261  52		     1		push 	edx
 00000262  BA 00000058 R     1		mov		edx, OFFSET invalid_entry
 00000267  E8 00000000 E     1		call	WriteString
 0000026C  5A		     1		pop		edx
 0000026D  EB C4				jmp		col_check_top
						
 0000026F				fill_and_quit:
						
 0000026F  66| A3				mov		player_col, ax
	   0000000C R
					
 00000275  5D				pop		ebp
					ret
 00000276  5B		   *	    pop    ebx
 00000277  5A		   *	    pop    edx
 00000278  58		   *	    pop    eax
 00000279  C3		   *	    ret    00000h

 0000027A			player_input_validation ENDP

				;===============================================
 0000027A			check_column_playable PROC USES eax esi
				;
				;Pre-Conditions:EAX set.
				;Post-Conditions:returned in edx 1 = ok to place; 0 = full col
				;Requires:EAX to be set to col
				;Returns:EDX set to result
				;Description:checks if col can be played in
				;===============================================

 0000027A  50		   *	    push   eax
 0000027B  56		   *	    push   esi
 0000027C  55				push	ebp
 0000027D  8B EC			mov		ebp, esp

 0000027F  BE 000000CE R		mov		esi, OFFSET connect4_grid
 00000284  6B C0 02			imul	eax, 2 ; 2 -> 4 (size conversion)
					
 00000287  03 F0			add		esi, eax
 00000289  66| 39 16			cmp 	[esi], dx ;NOTE: edx==0 at this time. check if target col's top cell is empty
					
 0000028C  74 02			je		col_is_free
 0000028E  75 07			jne		col_is_full
					
 00000290				col_is_free:
 00000290  BA 00000001				mov		edx, 1 ; success
 00000295  EB 07				jmp		return_to_parent

 00000297				col_is_full:
 00000297  BA 00000000				mov		edx, 0 ; success
 0000029C  EB 00				jmp		return_to_parent

					
 0000029E				return_to_parent:
 0000029E  5D				pop		ebp
					ret
 0000029F  5E		   *	    pop    esi
 000002A0  58		   *	    pop    eax
 000002A1  C3		   *	    ret    00000h

 000002A2			check_column_playable ENDP

				;===============================================
 000002A2			get_input_on_range PROC
				;
				;Pre-Conditions: UPPER in ebx. Lower in edx. 
				;Post-Conditions:Result in eax
				;Requires: see pre conditions
				;Returns:result of input in eax
				;Description: forces input on range defined as edx and ebx (^)
				;===============================================

 000002A2  55				push	ebp
 000002A3  8B EC			mov		ebp, esp

					;ebx = upper
					;edx = lower
					
					;text string already printed. Take input:
 000002A5				value_entry_top:
					
 000002A5  E8 00000000 E		call	ReadDec
 000002AA  3B C3			cmp		eax, ebx ; eax <= ebx
 000002AC  7F 06			jg		error_message
 000002AE  3B C2			cmp		eax, edx ; eax >= edx
 000002B0  7C 02			jl		error_message
 000002B2  EB 33			jmp		value_ok
					
 000002B4				error_message:

 000002B4  83 F9 01				cmp		ecx, 1
 000002B7  74 10				je		print_on_line
 000002B9  EB 00				jmp		print_normal
						
 000002BB					print_normal:
							mwritestring invalid_entry
 000002BB  52		     1		push 	edx
 000002BC  BA 00000058 R     1		mov		edx, OFFSET invalid_entry
 000002C1  E8 00000000 E     1		call	WriteString
 000002C6  5A		     1		pop		edx
 000002C7  EB DC					jmp		value_entry_top
						
 000002C9					print_on_line:
							mclearandgotoline
 000002C9  52		     1		push	edx
 000002CA  B6 14	     1		mov		dh, grid_offset_top + 17;total offset from top where this line is.
 000002CC  B2 10	     1		mov		dl, grid_offset_side 
 000002CE  E8 00000000 E     1		call 	gotoXY
 000002D3  E8 0000035C	     1		call	clear_line
 000002D8  5A		     1		pop		edx
							mwritestring invalid_entry
 000002D9  52		     1		push 	edx
 000002DA  BA 00000058 R     1		mov		edx, OFFSET invalid_entry
 000002DF  E8 00000000 E     1		call	WriteString
 000002E4  5A		     1		pop		edx
 000002E5  EB BE					jmp		value_entry_top
							
 000002E7				value_ok:
					
 000002E7  5D				pop		ebp
 000002E8  C3				ret

 000002E9			get_input_on_range ENDP

					;===============================
					;      H O R I Z O N T A L
					;===============================

				;===============================================
 000002E9			check_horizontal PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:win in EDX
				;Description:iterates for every possible start value of a 
				;			horizontal string, and checks if it is a win
				;===============================================
					

 000002E9  56		   *	    push   esi
 000002EA  51		   *	    push   ecx
 000002EB  53		   *	    push   ebx
 000002EC  50		   *	    push   eax
 000002ED  55				push	ebp
 000002EE  8B EC			mov		ebp, esp
 000002F0  0F B7 05			movzx	eax, player_number
	   00000004 R
					
 000002F7  B9 00000007			mov		ecx, 7 ;rows to visit
 000002FC				row_loop_top:
					
 000002FC  51					push	ecx
 000002FD  8B D9				mov		ebx, ecx
 000002FF  B9 00000004				mov		ecx, 4
						
 00000304					col_loop_top:
						
 00000304  4B						dec		ebx ; row
 00000305  49						dec		ecx ; col

							;======================
							
 00000306  E8 00000023					call	load_horizontal
 0000030B  E8 00000229					call	check_for_win ;player in eax, results in edx
 00000310  83 FA 00					cmp		edx, 0
 00000313  75 0E					jne		return_horizontal_success ; assume the winner is the current player, as wincheck would have caught the other case
							
							;======================

 00000315  43						inc		ebx
 00000316  41						inc		ecx
							
 00000317  E2 EB					loop col_loop_top
							
 00000319  59					pop 	ecx
 0000031A  E2 E0				loop	row_loop_top
					
					;no win case
 0000031C  BB 00000000			mov		ebx, 0
 00000321  EB 05			jmp		return_horizontal
						
 00000323				return_horizontal_success:
 00000323  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 00000326  EB 00				jmp		return_horizontal
						
 00000328				return_horizontal:
 00000328  5D				pop		ebp
					ret
 00000329  58		   *	    pop    eax
 0000032A  5B		   *	    pop    ebx
 0000032B  59		   *	    pop    ecx
 0000032C  5E		   *	    pop    esi
 0000032D  C3		   *	    ret    00000h

 0000032E			check_horizontal ENDP

				;===============================================
 0000032E			load_horizontal PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions: EBX = row, EDX = col
				;Post-Conditions:check_array is filled with the appropriate values
				;Requires:
				;Returns:
				;Description: Loads the horizontal segment starting at ebx, edx into check_array.
				;===============================================

 0000032E  53		   *	    push   ebx
 0000032F  51		   *	    push   ecx
 00000330  52		   *	    push   edx
 00000331  56		   *	    push   esi
 00000332  50		   *	    push   eax
 00000333  55				push	ebp
 00000334  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 00000336  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 00000338  B9 00000004			mov		ecx, 4
					
 0000033D				horizontal_load_loop_top:
						
 0000033D  49					dec		ecx
 0000033E  52					push	edx
						;3,2,1,0
						
 0000033F  03 D1				add		edx, ecx ; add 0,1,2,3 to column number
						
 00000341  66| 89 1D				mov		get_row, bx
	   00000000 R
 00000348  66| 89 15				mov		get_col, dx
	   00000002 R
						
 0000034F  E8 000001B5				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 00000354  56		     1		push	esi
 00000355  50		     1		push	eax
 00000356  8B C0	     1		mov		eax, eax
 00000358  BE 00000130 R     1		mov		esi, OFFSET check_array
 0000035D  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 00000361  58		     1		pop		eax
 00000362  5E		     1		pop		esi
						
						
 00000363  5A					pop		edx
 00000364  41					inc		ecx
 00000365  E2 D6				loop horizontal_load_loop_top
						

 00000367  5D				pop		ebp
					ret
 00000368  58		   *	    pop    eax
 00000369  5E		   *	    pop    esi
 0000036A  5A		   *	    pop    edx
 0000036B  59		   *	    pop    ecx
 0000036C  5B		   *	    pop    ebx
 0000036D  C3		   *	    ret    00000h

 0000036E			load_horizontal ENDP

					;===============================
					;        V E R T I C A L
					;===============================

				;===============================================
 0000036E			check_vertical PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns: win in EDX
				;Description: Iterates for all vertical start points, checking if there 
				;			is a win condition there.
				;===============================================
					
 0000036E  56		   *	    push   esi
 0000036F  51		   *	    push   ecx
 00000370  53		   *	    push   ebx
 00000371  50		   *	    push   eax
 00000372  55				push	ebp
 00000373  8B EC			mov		ebp, esp
 00000375  0F B7 05			movzx	eax, player_number
	   00000004 R

 0000037C  B9 00000004			mov		ecx, 4 ;rows to visit
 00000381				row_loop_top:
					
 00000381  51					push	ecx
 00000382  8B D9				mov		ebx, ecx
 00000384  B9 00000007				mov		ecx, 7
						
 00000389					col_loop_top:
						
 00000389  4B						dec		ebx
 0000038A  49						dec		ecx

							;======================
							
 0000038B  E8 00000023					call	load_vertical
 00000390  E8 000001A4					call	check_for_win ;player in eax, results in edx
 00000395  83 FA 00					cmp		edx, 0
 00000398  75 0E					jne		return_vertical_success ; assume the winner is the current player, as wincheck would have caught the other case
							
							;======================

 0000039A  43						inc		ebx
 0000039B  41						inc		ecx
							
 0000039C  E2 EB					loop col_loop_top
							
 0000039E  59					pop 	ecx
 0000039F  E2 E0				loop	row_loop_top
					
					;no win case found. 
 000003A1  BB 00000000			mov		ebx, 0
 000003A6  EB 05			jmp		return_vertical
						
 000003A8				return_vertical_success:
 000003A8  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 000003AB  EB 00				jmp		return_vertical
						
 000003AD				return_vertical:

 000003AD  5D				pop		ebp
					ret
 000003AE  58		   *	    pop    eax
 000003AF  5B		   *	    pop    ebx
 000003B0  59		   *	    pop    ecx
 000003B1  5E		   *	    pop    esi
 000003B2  C3		   *	    ret    00000h

 000003B3			check_vertical ENDP

				;===============================================
 000003B3			load_vertical PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the vertical segment starting at ebx, edx into check_array.
				;===============================================

 000003B3  53		   *	    push   ebx
 000003B4  51		   *	    push   ecx
 000003B5  52		   *	    push   edx
 000003B6  56		   *	    push   esi
 000003B7  50		   *	    push   eax
 000003B8  55				push	ebp
 000003B9  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 000003BB  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 000003BD  B9 00000004			mov		ecx, 4
					
 000003C2				vertical_load_loop_top:
						
 000003C2  49					dec		ecx
 000003C3  53					push	ebx ; store the row number to mem
						;3,2,1,0
						
 000003C4  03 D9				add		ebx, ecx ; add 0,1,2,3 to row number
						
 000003C6  66| 89 1D				mov		get_row, bx
	   00000000 R
 000003CD  66| 89 15				mov		get_col, dx
	   00000002 R
						
 000003D4  E8 00000130				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 000003D9  56		     1		push	esi
 000003DA  50		     1		push	eax
 000003DB  8B C0	     1		mov		eax, eax
 000003DD  BE 00000130 R     1		mov		esi, OFFSET check_array
 000003E2  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 000003E6  58		     1		pop		eax
 000003E7  5E		     1		pop		esi
						
						
 000003E8  5B					pop		ebx
 000003E9  41					inc		ecx
 000003EA  E2 D6				loop vertical_load_loop_top
						

 000003EC  5D				pop		ebp
					ret
 000003ED  58		   *	    pop    eax
 000003EE  5E		   *	    pop    esi
 000003EF  5A		   *	    pop    edx
 000003F0  59		   *	    pop    ecx
 000003F1  5B		   *	    pop    ebx
 000003F2  C3		   *	    ret    00000h

 000003F3			load_vertical ENDP

					;===============================
					;         D I A G - U P
					;===============================
					
				;===============================================
 000003F3			check_diagonal_up PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns: win in EDX
				;Description:Checks all diagonal up start locations to see if there
				;			is a win case starting there.
				;===============================================
					
					;needs to generate (3,0) -> (6,3) = (0+3, 0) -> (3+3, 3)

 000003F3  56		   *	    push   esi
 000003F4  51		   *	    push   ecx
 000003F5  53		   *	    push   ebx
 000003F6  50		   *	    push   eax
 000003F7  55				push	ebp
 000003F8  8B EC			mov		ebp, esp
 000003FA  0F B7 05			movzx	eax, player_number
	   00000004 R
					
 00000401  B9 00000004			mov		ecx, 4 ;rows to visit
 00000406				row_loop_top:
					
 00000406  51					push	ecx
 00000407  8B D9				mov		ebx, ecx
 00000409  B9 00000004				mov		ecx, 4
						
 0000040E					col_loop_top:
					
 0000040E  83 C3 02					add		ebx, 2 ;row -1 +3 = +2
 00000411  49						dec		ecx ;col

							;======================

 00000412  E8 00000025					call	load_diagonal_up
 00000417  E8 0000011D					call	check_for_win ;player in eax, results in edx
 0000041C  83 FA 00					cmp		edx, 0
 0000041F  75 10					jne		return_diagonal_up_success ; assume the winner is the current player, as wincheck would have caught the other case
										
							;======================

 00000421  83 EB 02					sub		ebx, 2
 00000424  41						inc		ecx
							
 00000425  E2 E7					loop col_loop_top
							
 00000427  59					pop 	ecx
 00000428  E2 DC				loop	row_loop_top
					
					;no win case found. 
 0000042A  BA 00000000			mov		edx, 0
 0000042F  EB 05			jmp		return_diagonal_up
						
 00000431				return_diagonal_up_success:
 00000431  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 00000434  EB 00				jmp		return_diagonal_up
						
 00000436				return_diagonal_up:

 00000436  5D				pop		ebp
					ret
 00000437  58		   *	    pop    eax
 00000438  5B		   *	    pop    ebx
 00000439  59		   *	    pop    ecx
 0000043A  5E		   *	    pop    esi
 0000043B  C3		   *	    ret    00000h

 0000043C			check_diagonal_up ENDP

				;===============================================
 0000043C			load_diagonal_up PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the diagonal-up segment starting at ebx, edx into check_array.
				;===============================================

 0000043C  53		   *	    push   ebx
 0000043D  51		   *	    push   ecx
 0000043E  52		   *	    push   edx
 0000043F  56		   *	    push   esi
 00000440  50		   *	    push   eax
 00000441  55				push	ebp
 00000442  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 00000444  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 00000446  B9 00000004			mov		ecx, 4
					
 0000044B				diagonal_up_load_loop_top:
						
 0000044B  49					dec		ecx
 0000044C  53					push	ebx ; store the row number to mem
 0000044D  52					push	edx
						;ECX == 3,2,1,0
						
 0000044E  2B D9				sub		ebx, ecx ; add 0,1,2,3 to row number (3,0) -> (0,0)
 00000450  03 D1				add		edx, ecx ; add 0,1,2,3 to col number (0,0) -> (0,3)
						
 00000452  66| 89 1D				mov		get_row, bx
	   00000000 R
 00000459  66| 89 15				mov		get_col, dx
	   00000002 R
						
 00000460  E8 000000A4				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 00000465  56		     1		push	esi
 00000466  50		     1		push	eax
 00000467  8B C0	     1		mov		eax, eax
 00000469  BE 00000130 R     1		mov		esi, OFFSET check_array
 0000046E  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 00000472  58		     1		pop		eax
 00000473  5E		     1		pop		esi
						
 00000474  5A					pop		edx
 00000475  5B					pop		ebx
 00000476  41					inc		ecx
 00000477  E2 D2				loop diagonal_up_load_loop_top
						

 00000479  5D				pop		ebp
					ret
 0000047A  58		   *	    pop    eax
 0000047B  5E		   *	    pop    esi
 0000047C  5A		   *	    pop    edx
 0000047D  59		   *	    pop    ecx
 0000047E  5B		   *	    pop    ebx
 0000047F  C3		   *	    ret    00000h

 00000480			load_diagonal_up ENDP

					;===============================
					;      D I A G - D O W N
					;===============================

				;===============================================
 00000480			check_diagonal_down PROC USES esi ecx ebx eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:win in EDX
				;Description:Checks all diagonal-down starting locations and 
				;			checks for win case there.
				;===============================================
					
					;(0,0) -> (3,3)

 00000480  56		   *	    push   esi
 00000481  51		   *	    push   ecx
 00000482  53		   *	    push   ebx
 00000483  50		   *	    push   eax
 00000484  55				push	ebp
 00000485  8B EC			mov		ebp, esp
 00000487  0F B7 05			movzx	eax, player_number
	   00000004 R
					
 0000048E  B9 00000004			mov		ecx, 4 ;rows to visit
 00000493				row_loop_top:
					
 00000493  51					push	ecx
 00000494  8B D9				mov		ebx, ecx
 00000496  B9 00000004				mov		ecx, 4
						
 0000049B					col_loop_top:
						
 0000049B  4B						dec		ebx
 0000049C  49						dec		ecx

							;======================

 0000049D  E8 00000023					call	load_diagonal_down
 000004A2  E8 00000092					call	check_for_win ;player in eax, results in edx
 000004A7  83 FA 00					cmp		edx, 0
 000004AA  75 0E					jne		return_diagonal_down_success ; assume the winner is the current player, as wincheck would have caught the other case
							
							;======================

 000004AC  43						inc		ebx
 000004AD  41						inc		ecx
							
 000004AE  E2 EB					loop col_loop_top
							
 000004B0  59					pop 	ecx
 000004B1  E2 E0				loop	row_loop_top
					
					;no win case found. 
 000004B3  BA 00000000			mov		edx, 0
 000004B8  EB 05			jmp		return_diagonal_down
						
 000004BA				return_diagonal_down_success:
 000004BA  83 C4 04				add		esp, 4 ;account for the unpopped ecx from nested loop breakout
 000004BD  EB 00				jmp		return_diagonal_down
						
 000004BF				return_diagonal_down:
					
 000004BF  5D				pop		ebp
					ret
 000004C0  58		   *	    pop    eax
 000004C1  5B		   *	    pop    ebx
 000004C2  59		   *	    pop    ecx
 000004C3  5E		   *	    pop    esi
 000004C4  C3		   *	    ret    00000h

 000004C5			check_diagonal_down ENDP

				;===============================================
 000004C5			load_diagonal_down PROC USES ebx ecx edx esi eax
				;
				;Pre-Conditions:
				;Post-Conditions:
				;Requires:
				;Returns:
				;Description: Loads the diagonal-down segment starting at ebx, edx into check_array.
				;===============================================

 000004C5  53		   *	    push   ebx
 000004C6  51		   *	    push   ecx
 000004C7  52		   *	    push   edx
 000004C8  56		   *	    push   esi
 000004C9  50		   *	    push   eax
 000004CA  55				push	ebp
 000004CB  8B EC			mov		ebp, esp

					;ebx = row i.e. row 2
					;edx = col i.e. col 1
					
 000004CD  8B D1			mov		edx, ecx ; move the col into edx, so that ecx is free for loop
 000004CF  B9 00000004			mov		ecx, 4
					
 000004D4				diagonal_down_load_loop_top:
						
 000004D4  49					dec		ecx
 000004D5  53					push	ebx ; store the row number to mem
 000004D6  52					push	edx
						;ECX == 3,2,1,0
						
 000004D7  03 D9				add		ebx, ecx ; add 0,1,2,3 to row number (0,0) -> (3,0)
 000004D9  03 D1				add		edx, ecx ; add 0,1,2,3 to col number (6,0) -> (6,3)
						
 000004DB  66| 89 1D				mov		get_row, bx
	   00000000 R
 000004E2  66| 89 15				mov		get_col, dx
	   00000002 R
						
 000004E9  E8 0000001B				call	get_value_at ; eax has value at r,c
						msetval	eax, ecx, check_array ; set_value in array check array to ^ at index ecx
 000004EE  56		     1		push	esi
 000004EF  50		     1		push	eax
 000004F0  8B C0	     1		mov		eax, eax
 000004F2  BE 00000130 R     1		mov		esi, OFFSET check_array
 000004F7  66| 89 04 4E	     1		mov		[esi + (ecx * 2)], ax
 000004FB  58		     1		pop		eax
 000004FC  5E		     1		pop		esi
						
 000004FD  5A					pop		edx
 000004FE  5B					pop		ebx
 000004FF  41					inc		ecx
 00000500  E2 D2				loop diagonal_down_load_loop_top
						

 00000502  5D				pop		ebp
					ret
 00000503  58		   *	    pop    eax
 00000504  5E		   *	    pop    esi
 00000505  5A		   *	    pop    edx
 00000506  59		   *	    pop    ecx
 00000507  5B		   *	    pop    ebx
 00000508  C3		   *	    ret    00000h

 00000509			load_diagonal_down ENDP

				;===============================================
 00000509			get_value_at PROC uses esi ebx ecx
				;
				;Pre-Conditions:ebx = row; ecx -= col
				;Post-Conditions:
				;Requires:
				;Returns:value in eax
				;Description:returns value in eax. Use variables to access
				;===============================================

 00000509  56		   *	    push   esi
 0000050A  53		   *	    push   ebx
 0000050B  51		   *	    push   ecx
 0000050C  55				push	ebp
 0000050D  8B EC			mov		ebp, esp

 0000050F  BE 000000CE R		mov		esi, OFFSET connect4_grid
 00000514  0F B7 1D			movzx	ebx, get_row ; ROW
	   00000000 R
 0000051B  0F B7 0D			movzx	ecx, get_col ; COL
	   00000002 R
					
					;[esi + ((get_row * 7) + get_col)*2
					
 00000522  6B DB 0E			imul	ebx, 14
 00000525  6B C9 02			imul 	ecx, 2
					
 00000528  03 D9			add		ebx, ecx ; STO in ebx
 0000052A  03 F3			add		esi, ebx
					
 0000052C  B8 00000000			mov		eax, 0
 00000531  66| 8B 06			mov		ax, [esi]

 00000534  5D				pop		ebp
					ret
 00000535  59		   *	    pop    ecx
 00000536  5B		   *	    pop    ebx
 00000537  5E		   *	    pop    esi
 00000538  C3		   *	    ret    00000h

 00000539			get_value_at ENDP

				;===============================================
 00000539			check_for_win PROC USES esi ecx ebx
				;
				;Pre-Conditions:player in eax, check_array is defined
				;Post-Conditions:
				;Requires:
				;Returns:result in edx
				;Description:checks if check_array represents a win condition (1111 or 2222)
				;===============================================

 00000539  56		   *	    push   esi
 0000053A  51		   *	    push   ecx
 0000053B  53		   *	    push   ebx
 0000053C  55				push	ebp
 0000053D  8B EC			mov		ebp, esp

 0000053F  B9 00000004			mov		ecx, 4
					
 00000544				check_loop_top:
						
 00000544  BE 00000130 R			mov		esi, OFFSET check_array
 00000549  49					dec		ecx
 0000054A  8B D9				mov		ebx, ecx
 0000054C  6B DB 02				imul	ebx, 2
 0000054F  03 F3				add		esi, ebx

 00000551  66| 39 06				cmp		[esi],ax ; check against the player number
 00000554  75 07				jne		failed
						
 00000556  41					inc		ecx
 00000557  E2 EB				loop check_loop_top
						
 00000559  8B D0			mov		edx, eax ;set return value to be the player number
 0000055B  EB 07			jmp		check_proc_end
					
 0000055D				failed:
					
 0000055D  BA 00000000				mov		edx, 0
 00000562  EB 00				jmp		check_proc_end
					
 00000564				check_proc_end:
 00000564  5D				pop		ebp
					ret
 00000565  5B		   *	    pop    ebx
 00000566  59		   *	    pop    ecx
 00000567  5E		   *	    pop    esi
 00000568  C3		   *	    ret    00000h

 00000569			check_for_win ENDP

				;===============================================
 00000569			print_grid PROC USES eax ecx edx
				;
				;Pre-Conditions: none
				;Post-Conditions: grid is printed in *beauuuuutiful* color
				;Requires:defenition of function that dispays specific character colors
				;Returns:nothing
				;Description:the mostest amazingest fanciestest printout evar
				;===============================================

 00000569  50		   *	    push   eax
 0000056A  51		   *	    push   ecx
 0000056B  52		   *	    push   edx
 0000056C  55				push	ebp
 0000056D  8B EC			mov		ebp, esp
					
 0000056F  B6 03			mov		dh, grid_offset_top
 00000571  B2 10			mov		dl, grid_offset_side
					
 00000573  BE 000000CE R		mov		esi, OFFSET connect4_grid
 00000578  B9 00000007			mov		ecx, 7
					
 0000057D  E8 00000000 E		call	gotoXY
					
 00000582  B8 00000011			mov		eax, blue + (16 * blue)
 00000587  E8 00000000 E		call	SetTextColor
					
					mwritestring g_bar
 0000058C  52		     1		push 	edx
 0000058D  BA 00000091 R     1		mov		edx, OFFSET g_bar
 00000592  E8 00000000 E     1		call	WriteString
 00000597  5A		     1		pop		edx
					
 00000598				top_row:
						
 00000598  51					push	ecx
 00000599  B9 00000007				mov		ecx, 7

 0000059E  FE C6				inc		dh ;move down one layer
 000005A0  E8 00000000 E			call	gotoXY
						
						mwritecharspace
 000005A5  50		     1		push 	eax
 000005A6  B0 20	     1		mov		al, ' '
 000005A8  E8 00000000 E     1		call	WriteChar
 000005AD  58		     1		pop		eax
						mwritecharpipe ; print pipe
 000005AE  50		     1		push 	eax
 000005AF  B0 7C	     1		mov		al, '|'
 000005B1  E8 00000000 E     1		call	WriteChar
 000005B6  58		     1		pop		eax
						mwritecharspace ; print space
 000005B7  50		     1		push 	eax
 000005B8  B0 20	     1		mov		al, ' '
 000005BA  E8 00000000 E     1		call	WriteChar
 000005BF  58		     1		pop		eax
					
 000005C0					top_col:
							
 000005C0  B8 00000000					mov		eax, 0
 000005C5  66| 8B 06					mov		ax, [esi]
							
							;call	WriteDec ; for no colors :(
 000005C8  E8 000000CC					call	print_value ; for colors:)
							
							mwritecharspace
 000005CD  50		     1		push 	eax
 000005CE  B0 20	     1		mov		al, ' '
 000005D0  E8 00000000 E     1		call	WriteChar
 000005D5  58		     1		pop		eax
							mwritecharpipe
 000005D6  50		     1		push 	eax
 000005D7  B0 7C	     1		mov		al, '|'
 000005D9  E8 00000000 E     1		call	WriteChar
 000005DE  58		     1		pop		eax
							mwritecharspace
 000005DF  50		     1		push 	eax
 000005E0  B0 20	     1		mov		al, ' '
 000005E2  E8 00000000 E     1		call	WriteChar
 000005E7  58		     1		pop		eax
							
 000005E8  83 C6 02					add 	esi, 2 ;next element queued up
							
 000005EB  E2 D3					loop 	top_col
								
 000005ED  59					pop		ecx
						
 000005EE  FE C6				inc		dh ;move down one layer
 000005F0  E8 00000000 E			call	gotoXY
						mwritestring g_bar ; print a bar
 000005F5  52		     1		push 	edx
 000005F6  BA 00000091 R     1		mov		edx, OFFSET g_bar
 000005FB  E8 00000000 E     1		call	WriteString
 00000600  5A		     1		pop		edx
						
 00000601  E2 95				loop	top_row
					
					;Printing is done.
					
 00000603  B8 00000002			mov		eax, green
 00000608  E8 00000000 E		call	SetTextColor
					
 0000060D  FE C6			inc		dh ;move down one layer
 0000060F  E8 00000000 E		call	gotoXY
					mwritestring g_numbers
 00000614  52		     1		push 	edx
 00000615  BA 000000B1 R     1		mov		edx, OFFSET g_numbers
 0000061A  E8 00000000 E     1		call	WriteString
 0000061F  5A		     1		pop		edx
					
 00000620  80 C6 02			add		dh, 2
					
					mresettextcolor
 00000623  50		     1		push	eax
 00000624  B8 0000000F	     1		mov		eax, white + (black * 16)
 00000629  E8 00000000 E     1		call	SetTextColor
 0000062E  58		     1		pop		eax
					
 0000062F  5D				pop		ebp
					ret
 00000630  5A		   *	    pop    edx
 00000631  59		   *	    pop    ecx
 00000632  58		   *	    pop    eax
 00000633  C3		   *	    ret    00000h

 00000634			print_grid ENDP

				;===============================================
 00000634			clear_line PROC USES ecx
				;
				;Pre-Conditions:cursor is set to line using gotoXY
				;Post-Conditions:line (first 65 chars) is cleared
				;Requires:
				;Returns:
				;Description:blanks out a line whose start is at the current cursor location
				;===============================================

 00000634  51		   *	    push   ecx
 00000635  55				push	ebp
 00000636  8B EC			mov		ebp, esp
					
 00000638  B9 00000041			mov		ecx, 65
					
 0000063D				spaces_print_top:
					
						mwritecharspace
 0000063D  50		     1		push 	eax
 0000063E  B0 20	     1		mov		al, ' '
 00000640  E8 00000000 E     1		call	WriteChar
 00000645  58		     1		pop		eax

 00000646  E2 F5			loop 	spaces_print_top
					
 00000648  E8 00000000 E		call	GotoXY
					
 0000064D  5D				pop		ebp
					ret
 0000064E  59		   *	    pop    ecx
 0000064F  C3		   *	    ret    00000h

 00000650			clear_line ENDP

				;===============================================
 00000650			drop_to_bottom PROC USES ecx eax ebx edx esi
				;
				;Pre-Conditions:grid and player col and player number are defined
				;Post-Conditions:grid has newly added element in the lowest cell it can be in
				;Requires: that there is no value in the top element of that column
				;Returns:nothing
				;Description:drops the player's play to the bottom of their column
				;===============================================

 00000650  51		   *	    push   ecx
 00000651  50		   *	    push   eax
 00000652  53		   *	    push   ebx
 00000653  52		   *	    push   edx
 00000654  56		   *	    push   esi
 00000655  55				push	ebp
 00000656  8B EC			mov		ebp, esp
					
 00000658  BE 000000CE R		mov		esi, OFFSET connect4_grid
 0000065D  B9 00000006			mov		ecx, 6; set the counter to loop 6 times
 00000662  BB 00000000			mov		ebx, 0; compare to this because cannot compare to literal
					
 00000667  0F B7 05			movzx	eax, player_col ; i.e.e col 5
	   0000000C R
 0000066E  6B C0 02			imul	eax, 2 ; 5 --> 10
 00000671  03 F0			add 	esi, eax
					
 00000673  8B C6			mov		eax, esi ; move the pointer to the first element int eax.
 00000675  83 C0 0E			add		eax, 14 ;add 14 to eax to get the next element down the column.
					
 00000678				drop_to_bottom_loop_top:
					
 00000678  66| 39 18				cmp 	[eax], bx ; check if the next value down is zero
 0000067B  74 02				je		loop_again
 0000067D  EB 07				jmp		fill_esi 	
						
 0000067F					loop_again:
						
 0000067F  8B F0				mov		esi, eax
 00000681  83 C0 0E				add		eax, 14
 00000684  E2 F2				loop	drop_to_bottom_loop_top
					
					
 00000686				fill_esi:
 00000686  0F B7 1D				movzx	ebx, player_number
	   00000004 R
 0000068D  66| 89 1E				mov		[esi], bx
 00000690  EB 00				jmp		fill_end
					
					
 00000692				fill_end:
 00000692  5D				pop		ebp
					ret
 00000693  5E		   *	    pop    esi
 00000694  5A		   *	    pop    edx
 00000695  5B		   *	    pop    ebx
 00000696  58		   *	    pop    eax
 00000697  59		   *	    pop    ecx
 00000698  C3		   *	    ret    00000h

 00000699			drop_to_bottom ENDP

				;===============================================
 00000699			print_value PROC USES eax
				;
				;Pre-Conditions:called from print_grid
				;Post-Conditions:the cell value is printed. element is passed in ebx
				;Requires:passing of element in ebx
				;Returns:noting
				;Description:wow much colors; wow big printout; 
				;===============================================

 00000699  50		   *	    push   eax
 0000069A  55				push	ebp
 0000069B  8B EC			mov		ebp, esp
					
 0000069D  8B D8			mov		ebx, eax
					
 0000069F  E8 00000000 E		call	GetTextColor
 000006A4  50				push	eax; push original color
					
 000006A5  83 FB 01			cmp		ebx,1
 000006A8  7C 04			jl		black_color
 000006AA  74 17			je		red_color
 000006AC  7F 2A			jg		yellow_color
					
 000006AE				black_color:
						
 000006AE  B8 00000000				mov		eax, black*16
 000006B3  E8 00000000 E			call	SetTextColor
						mwritecharspace
 000006B8  50		     1		push 	eax
 000006B9  B0 20	     1		mov		al, ' '
 000006BB  E8 00000000 E     1		call	WriteChar
 000006C0  58		     1		pop		eax
 000006C1  EB 2A				jmp 	print_value_end
						
 000006C3				red_color:
						
 000006C3  B8 00000040				mov		eax, red*16
 000006C8  E8 00000000 E			call	SetTextColor
						mwritecharspace
 000006CD  50		     1		push 	eax
 000006CE  B0 20	     1		mov		al, ' '
 000006D0  E8 00000000 E     1		call	WriteChar
 000006D5  58		     1		pop		eax
 000006D6  EB 15				jmp 	print_value_end
						
 000006D8				yellow_color:
						
 000006D8  B8 000000E0				mov		eax, yellow*16
 000006DD  E8 00000000 E			call	SetTextColor
						mwritecharspace
 000006E2  50		     1		push 	eax
 000006E3  B0 20	     1		mov		al, ' '
 000006E5  E8 00000000 E     1		call	WriteChar
 000006EA  58		     1		pop		eax
 000006EB  EB 00				jmp 	print_value_end
					
 000006ED				print_value_end:
					
 000006ED  58				pop		eax
 000006EE  E8 00000000 E		call	SetTextColor
					
 000006F3  5D				pop		ebp
					ret
 000006F4  58		   *	    pop    eax
 000006F5  C3		   *	    ret    00000h

 000006F6			print_value ENDP

				END main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/17/19 14:46:37
CONNECT FOUR     (connect4.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

mclearandgotoline  . . . . . . .	Proc
mclearhome . . . . . . . . . . .	Proc
mresettextcolor  . . . . . . . .	Proc
msetval  . . . . . . . . . . . .	Proc
mwincheck  . . . . . . . . . . .	Proc
mwritecharpipe . . . . . . . . .	Proc
mwritecharspace  . . . . . . . .	Proc
mwritedecfrom  . . . . . . . . .	Proc
mwritestringnewline  . . . . . .	Proc
mwritestring . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_BSS . . . . . . . . . . . . . .	32 Bit	 0000000E Para	  Public  'BSS'  
_DATA  . . . . . . . . . . . . .	32 Bit	 00000138 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000006F6 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
check_column_playable  . . . . .	P Near	 0000027A _TEXT	Length= 00000028 Public STDCALL
  col_is_free  . . . . . . . . .	L Near	 00000290 _TEXT	
  col_is_full  . . . . . . . . .	L Near	 00000297 _TEXT	
  return_to_parent . . . . . . .	L Near	 0000029E _TEXT	
check_diagonal_down  . . . . . .	P Near	 00000480 _TEXT	Length= 00000045 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 00000493 _TEXT	
  col_loop_top . . . . . . . . .	L Near	 0000049B _TEXT	
  return_diagonal_down_success .	L Near	 000004BA _TEXT	
  return_diagonal_down . . . . .	L Near	 000004BF _TEXT	
check_diagonal_up  . . . . . . .	P Near	 000003F3 _TEXT	Length= 00000049 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 00000406 _TEXT	
  col_loop_top . . . . . . . . .	L Near	 0000040E _TEXT	
  return_diagonal_up_success . .	L Near	 00000431 _TEXT	
  return_diagonal_up . . . . . .	L Near	 00000436 _TEXT	
check_for_win  . . . . . . . . .	P Near	 00000539 _TEXT	Length= 00000030 Public STDCALL
  check_loop_top . . . . . . . .	L Near	 00000544 _TEXT	
  failed . . . . . . . . . . . .	L Near	 0000055D _TEXT	
  check_proc_end . . . . . . . .	L Near	 00000564 _TEXT	
check_horizontal . . . . . . . .	P Near	 000002E9 _TEXT	Length= 00000045 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 000002FC _TEXT	
  col_loop_top . . . . . . . . .	L Near	 00000304 _TEXT	
  return_horizontal_success  . .	L Near	 00000323 _TEXT	
  return_horizontal  . . . . . .	L Near	 00000328 _TEXT	
check_vertical . . . . . . . . .	P Near	 0000036E _TEXT	Length= 00000045 Public STDCALL
  row_loop_top . . . . . . . . .	L Near	 00000381 _TEXT	
  col_loop_top . . . . . . . . .	L Near	 00000389 _TEXT	
  return_vertical_success  . . .	L Near	 000003A8 _TEXT	
  return_vertical  . . . . . . .	L Near	 000003AD _TEXT	
clear_line . . . . . . . . . . .	P Near	 00000634 _TEXT	Length= 0000001C Public STDCALL
  spaces_print_top . . . . . . .	L Near	 0000063D _TEXT	
computer_input_validation  . . .	P Near	 00000201 _TEXT	Length= 0000002C Public STDCALL
  col_check_top  . . . . . . . .	L Near	 00000207 _TEXT	
  fill_and_quit  . . . . . . . .	L Near	 00000222 _TEXT	
drop_to_bottom . . . . . . . . .	P Near	 00000650 _TEXT	Length= 00000049 Public STDCALL
  drop_to_bottom_loop_top  . . .	L Near	 00000678 _TEXT	
  loop_again . . . . . . . . . .	L Near	 0000067F _TEXT	
  fill_esi . . . . . . . . . . .	L Near	 00000686 _TEXT	
  fill_end . . . . . . . . . . .	L Near	 00000692 _TEXT	
get_input_on_range . . . . . . .	P Near	 000002A2 _TEXT	Length= 00000047 Public STDCALL
  value_entry_top  . . . . . . .	L Near	 000002A5 _TEXT	
  error_message  . . . . . . . .	L Near	 000002B4 _TEXT	
  print_normal . . . . . . . . .	L Near	 000002BB _TEXT	
  print_on_line  . . . . . . . .	L Near	 000002C9 _TEXT	
  value_ok . . . . . . . . . . .	L Near	 000002E7 _TEXT	
get_value_at . . . . . . . . . .	P Near	 00000509 _TEXT	Length= 00000030 Public STDCALL
load_diagonal_down . . . . . . .	P Near	 000004C5 _TEXT	Length= 00000044 Public STDCALL
  diagonal_down_load_loop_top  .	L Near	 000004D4 _TEXT	
load_diagonal_up . . . . . . . .	P Near	 0000043C _TEXT	Length= 00000044 Public STDCALL
  diagonal_up_load_loop_top  . .	L Near	 0000044B _TEXT	
load_horizontal  . . . . . . . .	P Near	 0000032E _TEXT	Length= 00000040 Public STDCALL
  horizontal_load_loop_top . . .	L Near	 0000033D _TEXT	
load_vertical  . . . . . . . . .	P Near	 000003B3 _TEXT	Length= 00000040 Public STDCALL
  vertical_load_loop_top . . . .	L Near	 000003C2 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000201 Public STDCALL
  top_main . . . . . . . . . . .	L Near	 00000000 _TEXT	
  computer_switch_no_change  . .	L Near	 0000004D _TEXT	
  loop_main_top  . . . . . . . .	L Near	 00000077 _TEXT	
  top_turn . . . . . . . . . . .	L Near	 00000084 _TEXT	
  computer_turn  . . . . . . . .	L Near	 000000AD _TEXT	
  player_turn  . . . . . . . . .	L Near	 000000B4 _TEXT	
  win_check_label  . . . . . . .	L Near	 000000EE _TEXT	
  add_one  . . . . . . . . . . .	L Near	 00000127 _TEXT	
  swap_done  . . . . . . . . . .	L Near	 00000128 _TEXT	
  win_for_current_player . . . .	L Near	 0000013A _TEXT	
  cat_game . . . . . . . . . . .	L Near	 00000181 _TEXT	
  play_again . . . . . . . . . .	L Near	 000001AB _TEXT	
  hard_stop  . . . . . . . . . .	L Near	 000001FA _TEXT	
player_input_validation  . . . .	P Near	 0000022D _TEXT	Length= 0000004D Public STDCALL
  col_check_top  . . . . . . . .	L Near	 00000233 _TEXT	
  retry_with_error . . . . . . .	L Near	 00000251 _TEXT	
  fill_and_quit  . . . . . . . .	L Near	 0000026F _TEXT	
print_grid . . . . . . . . . . .	P Near	 00000569 _TEXT	Length= 000000CB Public STDCALL
  top_row  . . . . . . . . . . .	L Near	 00000598 _TEXT	
  top_col  . . . . . . . . . . .	L Near	 000005C0 _TEXT	
print_value  . . . . . . . . . .	P Near	 00000699 _TEXT	Length= 0000005D Public STDCALL
  black_color  . . . . . . . . .	L Near	 000006AE _TEXT	
  red_color  . . . . . . . . . .	L Near	 000006C3 _TEXT	
  yellow_color . . . . . . . . .	L Near	 000006D8 _TEXT	
  print_value_end  . . . . . . .	L Near	 000006ED _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cat_game_printout  . . . . . . .	Byte	 0000001C _DATA	
check_array  . . . . . . . . . .	Word	 00000130 _DATA	
cols . . . . . . . . . . . . . .	Number	 00000007h   
computer_switch  . . . . . . . .	Word	 00000008 _BSS	
connect4_grid  . . . . . . . . .	Word	 000000CE _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
g_bar  . . . . . . . . . . . . .	Byte	 00000091 _DATA	
g_numbers  . . . . . . . . . . .	Byte	 000000B1 _DATA	
get_col  . . . . . . . . . . . .	Word	 00000002 _BSS	
get_row  . . . . . . . . . . . .	Word	 00000000 _BSS	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
grid_offset_side . . . . . . . .	Number	 00000010h   
grid_offset_top  . . . . . . . .	Number	 00000003h   
invalid_entry  . . . . . . . . .	Byte	 00000058 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
play_again_prompt  . . . . . . .	Byte	 0000003B _DATA	
player_1 . . . . . . . . . . . .	Byte	 00000050 _DATA	
player_col_entry_2 . . . . . . .	Byte	 0000006C _DATA	
player_col . . . . . . . . . . .	Word	 0000000C _BSS	
player_count_prompt  . . . . . .	Byte	 0000000A _DATA	
player_number  . . . . . . . . .	Word	 00000004 _BSS	
player_win_2 . . . . . . . . . .	Byte	 00000089 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rows . . . . . . . . . . . . . .	Number	 00000007h   
turns_played_total . . . . . . .	Word	 00000006 _BSS	
turns_to_cat . . . . . . . . . .	Number	 00000032h   
welcome_message  . . . . . . . .	Byte	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winning_player . . . . . . . . .	Word	 0000000A _BSS	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
